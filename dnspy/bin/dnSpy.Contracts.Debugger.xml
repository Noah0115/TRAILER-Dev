<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dnSpy.Contracts.Debugger</name>
    </assembly>
    <members>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction">
            <summary>
            Hooked function. The owner can write their own code by calling <see cref="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.WriteByte(System.Byte)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.CurrentAddress">
            <summary>
            Gets the next address that <see cref="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.WriteByte(System.Byte)"/> will write to
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.NewCodeAddress">
            <summary>
            Gets the address of the new hooked function. The first written byte will be written to this location.
            The original function is patched to jump to this address.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.NewFunctionAddress">
            <summary>
            Gets the address of the original function after it has been moved. This address can be used
            to call the original function from the new code.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.OriginalFunctionAddress">
            <summary>
            Gets the address of the function, which has been hooked by us. If you must call the real function
            from the new code, call <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.NewFunctionAddress"/> and not this address.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunction.WriteByte(System.Byte)">
            <summary>
            Writes the next byte to the code section
            </summary>
            <param name="value">Byte to write</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunctionProvider">
            <summary>
            Finds exported functions in native dlls
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunctionProvider.GetFunction(System.String,System.String)">
            <summary>
            Gets a function
            </summary>
            <param name="dllName">DLL name including the dll extension</param>
            <param name="funcName">Name of function</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunctionProvider.GetFunction(System.String,System.String,System.UInt64)">
            <summary>
            Creates a hooked function
            </summary>
            <param name="dllName">DLL name including the dll extension</param>
            <param name="funcName">Name of function</param>
            <param name="address">Address of function</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunctionProvider.TryGetModuleAddress(System.String,System.UInt64@,System.UInt64@)">
            <summary>
            Gets the address of a module
            </summary>
            <param name="dllName">DLL name including the dll extension</param>
            <param name="address">Start address of module</param>
            <param name="endAddress">End address of module (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgHookedNativeFunctionProvider.TryGetFunction(System.String,System.String,System.UInt64@)">
            <summary>
            Gets the address of a function
            </summary>
            <param name="dllName">DLL name including the dll extension</param>
            <param name="funcName">Name of function</param>
            <param name="address">Address of function</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgNativeFunctionHookContext">
            <summary>
            Context used by a <see cref="T:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHook"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgNativeFunctionHookContext.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.DbgNativeFunctionHookContext.FunctionProvider">
            <summary>
            Finds exported functions in loaded native modules in the target process
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHook">
            <summary>
            Hooks native functions when the debugged process starts.
            Use <see cref="T:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHook.IsEnabled(dnSpy.Contracts.Debugger.AntiAntiDebug.DbgNativeFunctionHookContext)">
            <summary>
            Returns true if it's enabled
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHook.Hook(dnSpy.Contracts.Debugger.AntiAntiDebug.DbgNativeFunctionHookContext,System.String@)">
            <summary>
            Hooks the function
            </summary>
            <param name="context">Context</param>
            <param name="errorMessage">Updated with an error message if it failed or null if it was successful</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata.Dll">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Dll"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata.Function">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Function"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata.Architectures">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Architectures"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata.OperatingSystems">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.OperatingSystems"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHookMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.AntiAntiDebug.IDbgNativeFunctionHook"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.#ctor(System.String,System.String,dnSpy.Contracts.Debugger.DbgArchitecture,dnSpy.Contracts.Debugger.DbgOperatingSystem,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="dll">DLL name including dll extension, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.</param>
            <param name="function">Function name, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.</param>
            <param name="architecture">Supported architecture</param>
            <param name="operatingSystem">Supported operating system</param>
            <param name="order">Order</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.#ctor(System.String,System.String,dnSpy.Contracts.Debugger.DbgArchitecture[],dnSpy.Contracts.Debugger.DbgOperatingSystem[],System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="dll">DLL name including dll extension, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.</param>
            <param name="function">Function name, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.</param>
            <param name="architectures">Supported architectures or empty to support all available architectures</param>
            <param name="operatingSystems">Supported operating systems or empty to support all operating systems</param>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Dll">
            <summary>
            DLL name including dll extension, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Function">
            <summary>
            Function name, case sensitive. It can be any name, it's only used to make sure only one handler patches a function.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Architectures">
            <summary>
            Supported architectures or empty to support all available architectures
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.OperatingSystems">
            <summary>
            Supported operating systems or empty to support all operating systems
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.AntiAntiDebug.ExportDbgNativeFunctionHookAttribute.Order">
            <summary>
            Gets the order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AttachToProgramOptions">
            <summary>
            Attach to program base class. Created eg. by <see cref="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.GetOptions"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.AttachToProgramOptions.CopyTo(dnSpy.Contracts.Debugger.AttachToProgramOptions)">
            <summary>
            Copies this instance to <paramref name="other"/> and returns it
            </summary>
            <param name="other">Destination</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachableProcess">
            <summary>
            A process that can be attached to
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.RuntimeId">
            <summary>
            Runtime id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.RuntimeGuid">
            <summary>
            Gets the runtime GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.RuntimeKindGuid">
            <summary>
            Gets the runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.RuntimeName">
            <summary>
            Runtime name, eg. "CLR v4.0.30319"
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.Name">
            <summary>
            Short process name (filename)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.Title">
            <summary>
            Process title
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.Filename">
            <summary>
            Full filename
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.Architecture">
            <summary>
            Processor architecture
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachableProcess.OperatingSystem">
            <summary>
            Operating system
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcess.GetOptions">
            <summary>
            Gets all options required to attach to the process
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcess.Attach">
            <summary>
            Attaches to the process
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachableProcessesService">
            <summary>
            Returns all processes that the debug engines support
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcessesService.GetAttachableProcessesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all programs that can be attached to
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcessesService.GetAttachableProcessesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all programs that can be attached to
            </summary>
            <param name="processName">Process name. If it's empty or null, it matches any string. This can include wildcards (* and ?).</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcessesService.GetAttachableProcessesAsync(System.String[],System.String[],System.Threading.CancellationToken)">
            <summary>
            Gets all programs that can be attached to
            </summary>
            <param name="processNames">Process names or null/empty to match any process name. The process name can
            include wildcards (* and ?)</param>
            <param name="providerNames"><see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory"/> names, see <see cref="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames"/></param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachableProcessesService.GetAttachableProcessesAsync(System.String[],System.Int32[],System.String[],System.Threading.CancellationToken)">
            <summary>
            Gets all programs that can be attached to
            </summary>
            <param name="processNames">Process names or null/empty to match any process name. The process name can
            include wildcards (* and ?)</param>
            <param name="processIds">Process ids or null/empty to match any process id</param>
            <param name="providerNames"><see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory"/> names or null, see <see cref="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames"/></param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions">
            <summary>
            Options shown in the 'attach to process' dialog box and created by <see cref="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider.Create(dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.RuntimeId">
            <summary>
            Runtime id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.RuntimeGuid">
            <summary>
            Gets the runtime GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.RuntimeKindGuid">
            <summary>
            Gets the runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.RuntimeName">
            <summary>
            Runtime name, eg. "CLR v4.0.30319"
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.Name">
            <summary>
            Short process name (filename) or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.Title">
            <summary>
            Process title or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.Filename">
            <summary>
            Full filename or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.CommandLine">
            <summary>
            Command line or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.Architecture">
            <summary>
            Processor architecture or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.OperatingSystem">
            <summary>
            Operating system or null to use the default value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions.GetOptions">
            <summary>
            Gets all options required to attach to the process
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider.Create(dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext)">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptions"/> instances. This method is called on a background thread.
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext">
            <summary>
            Context passed to <see cref="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider.Create(dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext)"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext.CancellationToken">
            <summary>
            Cancellation token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext.ProcessIds">
            <summary>
            All valid process ids or empty if any process id is valid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext.IsValidProcess">
            <summary>
            Checks if it's a valid process. May be null.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext.#ctor(System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderContext.#ctor(System.Int32[],System.Func{System.Diagnostics.Process,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
            <param name="processIds">All valid process ids or null/empty if any process id is valid</param>
            <param name="isValidProcess">Checks if it's a valid process. May be null.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider"/> instances. Use <see cref="T:dnSpy.Contracts.Debugger.Attach.ExportAttachProgramOptionsProviderFactoryAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory.Create(System.Boolean)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProvider"/> or returns null
            </summary>
            <param name="allFactories">true if all factories are called, false if only some of them get called</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.IAttachProgramOptionsProviderFactoryMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.IAttachProgramOptionsProviderFactoryMetadata.Name">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Attach.ExportAttachProgramOptionsProviderFactoryAttribute.Name"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.ExportAttachProgramOptionsProviderFactoryAttribute">
            <summary>
            Exports an <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.ExportAttachProgramOptionsProviderFactoryAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name, see <see cref="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.ExportAttachProgramOptionsProviderFactoryAttribute.Name">
            <summary>
            Name, see <see cref="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialog">
            <summary>
            Shows the Attach to Process dialog box
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialog.Show(dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions)">
            <summary>
            Shows the dialog box and returns the selected processes or an empty list
            </summary>
            <param name="options">Options or null to use the default options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialog.Attach(dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions)">
            <summary>
            Shows the dialog box and attaches to the selected processes
            </summary>
            <param name="options">Options or null to use the default options</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions">
            <summary>
            Attach to Process dialog options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions.Title">
            <summary>
            Gets the title or null to use the default title
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions.ProcessType">
            <summary>
            Type of processes that can be attached to. Shown in the title bar, eg. "Unity" or null to not show anything
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions.Message">
            <summary>
            Text shown at the bottom of the dialog box between the buttons or null to use the default value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions.ProviderNames">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory"/> names, see <see cref="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames"/>
            or null to check every provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.ShowAttachToProcessDialogOptions.InfoLink">
            <summary>
            Link button info shown next to the OK button
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.Dialogs.AttachToProcessLinkInfo">
            <summary>
            Link info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.AttachToProcessLinkInfo.ToolTipMessage">
            <summary>
            Tooltip message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Attach.Dialogs.AttachToProcessLinkInfo.Url">
            <summary>
            URL to go to when button is clicked
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Debugger.Attach.AttachProgramOptionsProviderFactory"/> names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames.DotNetFramework">
            <summary>
            .NET Framework
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames.UnityEditor">
            <summary>
            Unity Editor
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Attach.PredefinedAttachProgramOptionsProviderNames.UnityPlayer">
            <summary>
            Unity Player
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint">
            <summary>
            A bound breakpoint. These only exist while debugging a program. A bound breakpoint is only created
            if the breakpoint is enabled.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Module">
            <summary>
            Gets the module or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Address">
            <summary>
            Gets the address of the breakpoint. This property is valid if <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.HasAddress"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.HasAddress">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Address"/> is a valid address
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Message">
            <summary>
            Gets the warning/error message
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointSeverity">
            <summary>
            Bound breakpoint message severity
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointSeverity.None">
            <summary>
            No error/warning message
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointSeverity.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointSeverity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage">
            <summary>
            Bound breakpoint message
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.None">
            <summary>
            No error/warning message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.Severity">
            <summary>
            Gets the severity
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointSeverity,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="severity">Severity</param>
            <param name="message">Message</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpointMessage.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter">
            <summary>
            Formats some columns in the code breakpoints window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.NameProperty">
            <summary>
            Name of the Name property
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.ModuleProperty">
            <summary>
            Name of the Module property
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.RaiseNameChanged">
            <summary>
            Called when the name needs to be reformatted
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.RaiseModuleChanged">
            <summary>
            Called when the module needs to be reformatted
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.WriteName(dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions)">
            <summary>
            Writes the name shown in the Name column
            </summary>
            <param name="output">Output</param>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.WriteModule(dnSpy.Contracts.Debugger.Text.IDbgTextWriter)">
            <summary>
            Writes the module shown in the Module column
            </summary>
            <param name="output">Output</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatter.Dispose">
            <summary>
            Called when this instance isn't needed anymore
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions">
            <summary>
            Formatter options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.Tokens">
            <summary>
            Show metadata tokens
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.ModuleNames">
            <summary>
            Show module names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.ParameterTypes">
            <summary>
            Show parameter types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.ParameterNames">
            <summary>
            Show parameter names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.DeclaringTypes">
            <summary>
            Show declaring types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.ReturnTypes">
            <summary>
            Show return types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.Namespaces">
            <summary>
            Show namespaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.IntrinsicTypeKeywords">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.DigitSeparators">
            <summary>
            Use digit separators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterOptions.Decimal">
            <summary>
            Use decimal instead of hexadecimal
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation"/> formatters. Use <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterProvider.Create(dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Returns a formatter or null
            </summary>
            <param name="location">Breakpoint location</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.IDbgBreakpointLocationFormatterProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.IDbgBreakpointLocationFormatterProviderMetadata.Types">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute.Types"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointLocationFormatterProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="types">Types (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.ExportDbgBreakpointLocationFormatterProviderAttribute.Types">
            <summary>
            Types (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint">
            <summary>
            Code breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Id">
            <summary>
            Gets the unique code breakpoint id
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.HitCheck">
            <summary>
            Can be used by code to add custom hit test conditions
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Hit">
            <summary>
            Raised when the breakpoint is hit and the process will be paused
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Options">
            <summary>
            Gets the breakpoint options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.IsTemporary">
            <summary>
            true if it's a temporary breakpoint that gets removed when all debugged processes have exited
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.IsHidden">
            <summary>
            true if it's a hidden breakpoint. It's not shown in the UI (eg. breakpoints window, call stack window, glyph margin, text view)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.IsOneShot">
            <summary>
            true if it's a one-shot breakpoint. When the breakpoint is hit, the process is paused and the breakpoint is removed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Settings">
            <summary>
            Gets/sets the current settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.HitCount">
            <summary>
            Hit count
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Trace">
            <summary>
            Trace message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Labels">
            <summary>
            Labels
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Location">
            <summary>
            Gets the breakpoint location
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpoints">
            <summary>
            Gets all bound breakpoints
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpoints"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsMessage">
            <summary>
            Gets the bound breakpoints warning/error message
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsMessageChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsMessage"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.Remove">
            <summary>
            Removes the breakpoint
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitCheckEventArgs">
            <summary>
            Breakpoint hit check event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitCheckEventArgs.Pause">
            <summary>
            If false, it doesn't count as a hit and the process is not paused.
            If true, the normal BP settings decide if the process gets paused.
            The default value is true.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitCheckEventArgs.BoundBreakpoint">
            <summary>
            Gets the bound breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitCheckEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitCheckEventArgs.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="boundBreakpoint">Bound breakpoint</param>
            <param name="thread">Thread</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitEventArgs">
            <summary>
            Breakpoint hit event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitEventArgs.BoundBreakpoint">
            <summary>
            Gets the bound breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointHitEventArgs.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="boundBreakpoint">Bound breakpoint</param>
            <param name="thread">Thread</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings">
            <summary>
            Code breakpoint display settings
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.PropertyChanged"/>
            </summary>
            <param name="propName">Name of property that got changed</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowTokens">
            <summary>
            Show metadata tokens
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowModuleNames">
            <summary>
            Show module names
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowParameterTypes">
            <summary>
            Show parameter types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowParameterNames">
            <summary>
            Show parameter names
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowDeclaringTypes">
            <summary>
            Show declaring types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowReturnTypes">
            <summary>
            Show return types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowNamespaces">
            <summary>
            Show namespaces
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointDisplaySettings.ShowIntrinsicTypeKeywords">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService">
            <summary>
            Breakpoint hit count service
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService.HitCountChanged">
            <summary>
            Raised when the hit count is updated
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService.GetHitCount(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint)">
            <summary>
            Gets the hit count or null if we're not debugging
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService.Reset(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint)">
            <summary>
            Resets the hit count
            </summary>
            <param name="breakpoint">Breakpoint</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService.Reset(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint[])">
            <summary>
            Resets the hit count
            </summary>
            <param name="breakpoints">Breakpoints</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndHitCount">
            <summary>
            Breakpoint and hit count
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndHitCount.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndHitCount.HitCount">
            <summary>
            Gets the current hit count. It's null if we're not debugging
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndHitCount.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint,System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="hitCount">Current hit count or null if we're not debugging</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgHitCountChangedEventArgs">
            <summary>
            <see cref="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountService.HitCountChanged"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgHitCountChangedEventArgs.Breakpoints">
            <summary>
            Gets breakpoints and hit counts
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgHitCountChangedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndHitCount})">
            <summary>
            Constructor
            </summary>
            <param name="breakpoints">Breakpoints and hit counts</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint"/> options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions.Temporary">
            <summary>
            It's a temporary breakpoint that gets removed when all debugged processes have exited
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions.Hidden">
            <summary>
            It's a hidden breakpoint. It's not shown in the UI (eg. breakpoints window, call stack window, glyph margin, text view)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions.OneShot">
            <summary>
            It's a one-shot breakpoint. When the breakpoint is hit, the process is paused and the breakpoint is removed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings">
            <summary>
            Code breakpoint settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.HitCount">
            <summary>
            Hit count
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Trace">
            <summary>
            Trace message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Labels">
            <summary>
            Labels
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointConditionKind">
            <summary>
            Code breakpoint condition kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointConditionKind.IsTrue">
            <summary>
            Condition is true
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointConditionKind.WhenChanged">
            <summary>
            Condition is changed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition">
            <summary>
            Code breakpoint condition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.Kind">
            <summary>
            Condition kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.Condition">
            <summary>
            Condition expression
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointConditionKind,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="kind">Condition kind</param>
            <param name="condition">Condition expression</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointCondition.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountKind">
            <summary>
            Hit count kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountKind.Equals">
            <summary>
            Hit count == value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountKind.MultipleOf">
            <summary>
            (Hit count % value) == 0
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountKind.GreaterThanOrEquals">
            <summary>
            Hit count >= value
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount">
            <summary>
            Hit count
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.Kind">
            <summary>
            Hit count kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.Count">
            <summary>
            Hit count
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCountKind,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="kind">Hit count kind</param>
            <param name="count">Hit count</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointHitCount.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter">
            <summary>
            Code breakpoint filter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filter">Filter</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointFilter.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace">
            <summary>
            Code breakpoint trace message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.Continue">
            <summary>
            true to continue execution (trace) or false to break (breakpoint)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="continue">true to continue execution (tracepoint) or false to break (breakpoint)</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.Equals(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointTrace.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService">
            <summary>
            Code breakpoints service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Modify(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Modifies a breakpoint
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="settings">New settings</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Modify(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndSettings[])">
            <summary>
            Modifies breakpoints
            </summary>
            <param name="settings">New settings</param>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.BreakpointsModified">
            <summary>
            Raised when breakpoints are modified
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Breakpoints">
            <summary>
            Gets all breakpoints
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.VisibleBreakpoints">
            <summary>
            Gets all visible breakpoints
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.BreakpointsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Breakpoints"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Add(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo)">
            <summary>
            Adds a breakpoint. If the breakpoint already exists, null is returned.
            </summary>
            <param name="breakpoint">Breakpoint info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Add(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo[])">
            <summary>
            Adds breakpoints. Duplicate breakpoints are ignored.
            </summary>
            <param name="breakpoints">Breakpoints</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Remove(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint)">
            <summary>
            Removes a breakpoint
            </summary>
            <param name="breakpoint">Breakpoint to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Remove(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint[])">
            <summary>
            Removes breakpoints
            </summary>
            <param name="breakpoints">Breakpoints to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.TryGetBreakpoint(dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Returns an existing breakpoint at <paramref name="location"/> or null if none exists
            </summary>
            <param name="location">Location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.Clear">
            <summary>
            Removes all visible breakpoints
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService.BoundBreakpointsMessageChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsMessage"/> is changed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundBreakpointsMessageChangedEventArgs">
            <summary>
            <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint.BoundBreakpointsMessage"/> changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundBreakpointsMessageChangedEventArgs.Breakpoints">
            <summary>
            Gets all breakpoints
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundBreakpointsMessageChangedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint})">
            <summary>
            Constructor
            </summary>
            <param name="breakpoints">Breakpoints</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndOldSettings">
            <summary>
            Breakpoint and old settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndOldSettings.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndOldSettings.OldSettings">
            <summary>
            Gets the old settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndOldSettings.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Constructor
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="oldSettings">Old settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointsModifiedEventArgs">
            <summary>
            Breakpoints modified event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointsModifiedEventArgs.Breakpoints">
            <summary>
            Gets the breakpoints
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBreakpointsModifiedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndOldSettings})">
            <summary>
            Constructor
            </summary>
            <param name="breakpoints">Breakpoints and old settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndSettings">
            <summary>
            Breakpoint and settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndSettings.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndSettings.Settings">
            <summary>
            Gets the new settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointAndSettings.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Constructor
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="settings">New settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo">
            <summary>
            Info needed to add a breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo.Location">
            <summary>
            Breakpoint location
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo.Settings">
            <summary>
            Breakpoint settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo.Options">
            <summary>
            Breakpoint options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Constructor
            </summary>
            <param name="location">Breakpoint location. If you don't own this location instance, you must call <see cref="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Clone"/></param>
            <param name="settings">Breakpoint settings</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointInfo.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointOptions)">
            <summary>
            Constructor
            </summary>
            <param name="location">Breakpoint location. If you don't own this location instance, you must call <see cref="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Clone"/></param>
            <param name="settings">Breakpoint settings</param>
            <param name="options">Breakpoint options</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.IDbgCodeBreakpointsServiceListener">
            <summary>
            Export an instance to get created when <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService"/> gets created
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.IDbgCodeBreakpointsServiceListener.Initialize(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService)">
            <summary>
            Called once by <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointsService"/>
            </summary>
            <param name="dbgCodeBreakpointsService">Breakpoints service</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.Dialogs.ShowCodeBreakpointSettingsService">
            <summary>
            Shows the breakpoint settings dialog box
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.Dialogs.ShowCodeBreakpointSettingsService.Show(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpointSettings)">
            <summary>
            Shows the breakpoint settings dialog box and returns the new settings or null if the user canceled
            </summary>
            <param name="settings">Settings to edit</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.Dialogs.ShowCodeBreakpointSettingsService.Edit(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint)">
            <summary>
            Edits a breakpoint's settings
            </summary>
            <param name="breakpoint">Breakpoint</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.Dialogs.ShowCodeBreakpointSettingsService.Edit(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint[])">
            <summary>
            Edits breakpoint settings and writes the new settings to <paramref name="breakpoints"/>
            </summary>
            <param name="breakpoints">Breakpoints</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider">
            <summary>
            Provides all the values of the variables that can be used by the filter expression
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider.MachineName">
            <summary>
            Machine name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider.ProcessName">
            <summary>
            Process name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider.ThreadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider.ThreadName">
            <summary>
            Thread name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluator">
            <summary>
            Evaluates breakpoint filter expressions. Use <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.ExportDbgFilterExpressionEvaluatorAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluator.IsValidExpression(System.String)">
            <summary>
            Checks if <paramref name="expr"/> is a valid expression. Returns null if it's a valid expression,
            otherwise an error string is returned.
            </summary>
            <param name="expr">Filter expression</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluator.Evaluate(System.String,dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterEEVariableProvider)">
            <summary>
            Evaluates <paramref name="expr"/> and returns the result of the expression.
            </summary>
            <param name="expr">Filter expression</param>
            <param name="variableProvider">Provides the values of the variables that can be used by the expression</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluator.Write(dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.String)">
            <summary>
            Parses <paramref name="expr"/> and writes text and color to <paramref name="output"/>
            </summary>
            <param name="output">Output</param>
            <param name="expr">Expression</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult">
            <summary>
            Result of evaluating a filter expression
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.Result">
            <summary>
            Result if <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.HasError"/> is false
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.Error">
            <summary>
            Error message if <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.HasError"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.HasError">
            <summary>
            true if there was an error
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error">Error</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluatorResult.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="result">Result of evaluated expression</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.IDbgFilterExpressionEvaluatorMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.IDbgFilterExpressionEvaluatorMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.ExportDbgFilterExpressionEvaluatorAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.ExportDbgFilterExpressionEvaluatorAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.DbgFilterExpressionEvaluator"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.ExportDbgFilterExpressionEvaluatorAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.FilterExpressionEvaluator.ExportDbgFilterExpressionEvaluatorAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphFormatter">
            <summary>
            Writes breakpoints info used by breakpoint glyph margin code, eg. in tooltips.
            Use <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphFormatterAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphFormatter.WriteLocation(dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Writes the text shown after "Location: " in tooltips when hovering over the breakpoint icon in the glyph margin.
            Returns true if something was written, and false if nothing was written.
            </summary>
            <param name="output">Output</param>
            <param name="breakpoint">Breakpoint</param>
            <param name="textView">Text view</param>
            <param name="span">Span of breakpoint marker in the document</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.IDbgBreakpointGlyphFormatterMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.IDbgBreakpointGlyphFormatterMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphFormatterAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphFormatterAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphFormatter"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphFormatterAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphFormatterAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphTextMarkerLocationProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerLocationInfo"/>s. Use <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphTextMarkerLocationProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphTextMarkerLocationProvider.GetLocation(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgCodeBreakpoint)">
            <summary>
            Gets the location of the breakpoint or null
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.IDbgBreakpointGlyphTextMarkerLocationProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.IDbgBreakpointGlyphTextMarkerLocationProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphTextMarkerLocationProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphTextMarkerLocationProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.DbgBreakpointGlyphTextMarkerLocationProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphTextMarkerLocationProviderAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Code.TextEditor.ExportDbgBreakpointGlyphTextMarkerLocationProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint">
            <summary>
            Module breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.Id">
            <summary>
            Gets the unique module breakpoint id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.Settings">
            <summary>
            Gets/sets the current settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.ModuleName">
            <summary>
            Name of module (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.IsDynamic">
            <summary>
            true if dynamic, false if not dynamic, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.IsInMemory">
            <summary>
            true if in-memory, false if not in-memory, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.IsLoaded">
            <summary>
            true if it was loaded, false if it was unloaded, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.Order">
            <summary>
            Order or null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.AppDomainName">
            <summary>
            App domain name (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.ProcessName">
            <summary>
            Process name (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint.Remove">
            <summary>
            Removes this breakpoint from the module breakpoints list
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo">
            <summary>
            Module info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.ModuleName">
            <summary>
            Name of module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.IsDynamic">
            <summary>
            true if dynamic
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.IsInMemory">
            <summary>
            true if in-memory
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.IsLoaded">
            <summary>
            true if it was loaded, false if it was unloaded
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.AppDomainName">
            <summary>
            App domain name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.ProcessName">
            <summary>
            Process name
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo.#ctor(dnSpy.Contracts.Debugger.DbgModule,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="isLoaded">true if it was loaded, false if it was unloaded</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings">
            <summary>
            Module breakpoint settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.IsEnabled">
            <summary>
            true if the breakpoint is enabled
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.ModuleName">
            <summary>
            Name of module (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.IsDynamic">
            <summary>
            true if dynamic, false if not dynamic, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.IsInMemory">
            <summary>
            true if in-memory, false if not in-memory, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.IsLoaded">
            <summary>
            true if it was loaded, false if it was unloaded, and null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.Order">
            <summary>
            Module load order or null if any value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.AppDomainName">
            <summary>
            App domain name (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.ProcessName">
            <summary>
            Process name (case insensitive) or null/empty string if any name. Wildcards can be used
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.Equals(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings)">
            <summary>
            Compares this instance to <paramref name="other"/>
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService">
            <summary>
            Module breakpoints service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Modify(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings)">
            <summary>
            Modifies a breakpoint
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="settings">New settings</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Modify(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndSettings[])">
            <summary>
            Modifies breakpoints
            </summary>
            <param name="settings">New settings</param>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.BreakpointsModified">
            <summary>
            Raised when breakpoints are modified
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Breakpoints">
            <summary>
            Gets all breakpoints
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.BreakpointsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Breakpoints"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Add(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings)">
            <summary>
            Adds a breakpoint
            </summary>
            <param name="settings">Breakpoint settings</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Add(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings[])">
            <summary>
            Adds breakpoints
            </summary>
            <param name="settings">Breakpoint settings</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Remove(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint)">
            <summary>
            Removes a breakpoint
            </summary>
            <param name="breakpoint">Breakpoint to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Remove(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint[])">
            <summary>
            Removes breakpoints
            </summary>
            <param name="breakpoints">Breakpoints to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Clear">
            <summary>
            Removes all module breakpoints
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.Find(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo@)">
            <summary>
            Finds breakpoints
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointsService.IsMatch(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointInfo@)">
            <summary>
            Checks if <paramref name="module"/> matches at least one breakpoint
            </summary>
            <param name="module">Module</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndOldSettings">
            <summary>
            Breakpoint and old settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndOldSettings.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndOldSettings.OldSettings">
            <summary>
            Gets the old settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndOldSettings.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings)">
            <summary>
            Constructor
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="oldSettings">Old settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgBreakpointsModifiedEventArgs">
            <summary>
            Breakpoints modified event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgBreakpointsModifiedEventArgs.Breakpoints">
            <summary>
            Gets the breakpoints
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgBreakpointsModifiedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndOldSettings})">
            <summary>
            Constructor
            </summary>
            <param name="breakpoints">Breakpoints and old settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndSettings">
            <summary>
            Breakpoint and settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndSettings.Breakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndSettings.Settings">
            <summary>
            Gets the new settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointAndSettings.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpoint,dnSpy.Contracts.Debugger.Breakpoints.Modules.DbgModuleBreakpointSettings)">
            <summary>
            Constructor
            </summary>
            <param name="breakpoint">Breakpoint</param>
            <param name="settings">New settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService">
            <summary>
            Provides all stack frames shown in the call stack window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.Thread">
            <summary>
            Gets the selected thread. This is identical to <see cref="P:dnSpy.Contracts.Debugger.DbgManager.CurrentThread"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.ActiveFrameIndex">
            <summary>
            Index of active thread. This could be invalid if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.Frames"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.ActiveFrame">
            <summary>
            Gets the active frame or null if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.Frames"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.Frames">
            <summary>
            Gets all frames. This is a truncated list if there are too many frames
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.FramesChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackService.Frames"/> is changed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.FramesChangedEventArgs">
            <summary>
            Frames changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.FramesChangedEventArgs.FramesChanged">
            <summary>
            true if there are new frames available
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.FramesChangedEventArgs.ActiveFrameIndexChanged">
            <summary>
            true if active frame index changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.FramesChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="framesChanged">true if there are new frames available</param>
            <param name="activeFrameIndexChanged">true if active frame index changed</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo">
            <summary>
            Contains the stack frames and related info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.Frames">
            <summary>
            Gets all frames
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.FramesTruncated">
            <summary>
            true if there are too many frames and <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.Frames"/> is a truncated list of all frames
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.ActiveFrameIndex">
            <summary>
            Index of active thread. This could be invalid if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.Frames"/> is empty
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.ActiveStackFrame">
            <summary>
            Gets the active frame or null if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.Frames"/> is empty
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.DbgCallStackFramesInfo.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.CallStack.DbgStackFrame},System.Boolean,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="frames">All frames</param>
            <param name="framesTruncated">true if there are too many frames and <paramref name="frames"/> is a truncated list of all frames</param>
            <param name="activeFrameIndex">Index of active thread. This could be invalid if <paramref name="frames"/> is empty</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame">
            <summary>
            A stack frame in a debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.AppDomain">
            <summary>
            Gets the AppDomain or null if it's unknown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Location">
            <summary>
            Gets the location or null if none. Can be passed to <see cref="M:dnSpy.Contracts.Documents.ReferenceNavigatorService.GoTo(System.Object,System.Object[])"/>
            or can be used to create a breakpoint if you call <see cref="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Clone"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Module">
            <summary>
            Gets the module or null if it's unknown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.FunctionOffset">
            <summary>
            Gets the offset of the IP relative to the start of the function
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.FunctionToken">
            <summary>
            Gets the function token or <see cref="F:System.UInt32.MaxValue"/> if it doesn't have a token.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.HasFunctionToken">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.FunctionToken"/> is valid
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Close">
            <summary>
            Closes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrameFlags">
            <summary>
            Stack frame flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.CallStack.DbgStackFrameFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.CallStack.DbgStackFrameFlags.LocationIsNextStatement">
            <summary>
            Set if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Location"/> is the next statement to execute in this frame. It's also
            possible to set a BP at that location.
            
            It's false if <see cref="P:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame.Location"/> is just an approximate location and it's not safe
            to set a BP at the location.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker">
            <summary>
            Walks the stack of a thread in a debugged process and creates <see cref="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker.GetNextStackFrames(System.Int32)">
            <summary>
            Gets the next frames or an empty list if there are no more frames
            </summary>
            <param name="maxFrames">Max number of frames to return</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker.Close">
            <summary>
            Closes this instance. Any created <see cref="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame"/>s are not closed.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameGlyphTextMarkerLocationInfoProvider">
            <summary>
            Converts <see cref="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame"/>s to <see cref="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerLocationInfo"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameGlyphTextMarkerLocationInfoProvider.Create(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Text.Editor.GlyphTextMarkerLocationInfo"/> or returns null
            </summary>
            <param name="frame">Frame</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameTextViewMarker">
            <summary>
            Creates stack frame spans in <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameTextViewMarker.OnNewFrames(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.CallStack.DbgStackFrame})">
            <summary>
            Called when there's new frames. It's always called before <see cref="M:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameTextViewMarker.GetFrameSpans(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)"/>.
            The first frame (if it exists) should not be marked by this class.
            </summary>
            <param name="frames">New frames. These frames are owned by the caller and should not be closed by the callee.</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameTextViewMarker.GetFrameSpans(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns spans of the active statements set by <see cref="M:dnSpy.Contracts.Debugger.CallStack.TextEditor.DbgStackFrameTextViewMarker.OnNewFrames(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.CallStack.DbgStackFrame})"/>.
            It shouldn't return duplicate spans.
            The first frame (if it exists) should not be marked by this class.
            </summary>
            <param name="textView">Text view</param>
            <param name="spans">Spans</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation">
            <summary>
            Code location. There must be one owner per <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation"/> instance. If you must create a
            breakpoint using the same location, call <see cref="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Clone"/> and use the new instance as the breakpoint location.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type">
            <summary>
            Unique type, see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/>. There should
            be a 1-1 correspondence between this string and the derived type.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Clone">
            <summary>
            Clones this instance. The returned instance can be used to create a breakpoint. Use <see cref="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Close"/> to close it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Close">
            <summary>
            Closes this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Equals(System.Object)">
            <summary>
            Compares this instance to <paramref name="obj"/>
            </summary>
            <param name="obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocationSerializer">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation"/> serializer. Use <see cref="T:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocationSerializer.Serialize(dnSpy.Contracts.Settings.ISettingsSection,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Serializes <paramref name="location"/>
            </summary>
            <param name="section">Destination section</param>
            <param name="location">Breakpoint location</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.DbgCodeLocationSerializer.Deserialize(dnSpy.Contracts.Settings.ISettingsSection)">
            <summary>
            Deserializes a breakpoint location or returns null if it failed
            </summary>
            <param name="section">Serialized section</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.IDbgCodeLocationSerializerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Code.IDbgCodeLocationSerializerMetadata.Types">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute.Types"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocationSerializer"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="types">Types (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Code.ExportDbgCodeLocationSerializerAttribute.Types">
            <summary>
            Types (compared against <see cref="P:dnSpy.Contracts.Debugger.Code.DbgCodeLocation.Type"/>), see <see cref="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation"/> types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes.DotNet">
            <summary>
            .NET code location with a module, token, and IL offset
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Code.PredefinedDbgCodeLocationTypes.DotNetCorDebugNative">
            <summary>
            .NET (CorDebug): native breakpoint location
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewCodeLocationProvider">
            <summary>
            Creates breakpoint locations in text views
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewCodeLocationProvider.CreateLocation(dnSpy.Contracts.Documents.Tabs.IDocumentTab,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Debugger.Code.DbgCodeLocation"/> instance whose text view span is >= <paramref name="position"/>
            </summary>
            <param name="tab">Tab</param>
            <param name="textView">Text view</param>
            <param name="position">Position</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult">
            <summary>
            Text view locations
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.Locations">
            <summary>
            Gets all locations
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.Span">
            <summary>
            Gets the span
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Constructor
            </summary>
            <param name="location">Location</param>
            <param name="span">Text view span</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Constructor
            </summary>
            <param name="location">Location</param>
            <param name="span">Text view span</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation[],Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Constructor
            </summary>
            <param name="locations">Locations</param>
            <param name="span">Text view span</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Code.TextEditor.DbgTextViewBreakpointLocationResult.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation[],Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Constructor
            </summary>
            <param name="locations">Locations</param>
            <param name="span">Text view span</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgAppDomain">
            <summary>
            An application domain
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgAppDomain.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name">
            <summary>
            Gets the name of the app domain
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id">
            <summary>
            Gets the app domain id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.InternalAppDomain">
            <summary>
            Gets the app domain object created by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgAppDomain.Modules">
            <summary>
            Gets all modules
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1">
            <summary>
            Contains added or removed objects
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.Objects">
            <summary>
            The objects that got added or removed (see <see cref="P:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.Added"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.Added">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.Objects"/> were added, false if they were removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{`0},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objects">The objects that got added or removed (see <paramref name="added"/>)</param>
            <param name="added">true if <paramref name="objects"/> were added, false if they were removed</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.#ctor(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objects">The objects that got added or removed (see <paramref name="added"/>)</param>
            <param name="added">true if <paramref name="objects"/> were added, false if they were removed</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgCollectionChangedEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="obj">The object that got added or removed (see <paramref name="added"/>)</param>
            <param name="added">true if <paramref name="obj"/> was added, false if it was removed</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgDispatcher">
            <summary>
            Invokes code on another thread.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgDispatcher.VerifyAccess">
            <summary>
            Throws if the current thread isn't the dispatcher thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgDispatcher.CheckAccess">
            <summary>
            Checks whether the current thread is the dispatcher thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgDispatcher.BeginInvoke(System.Action)">
            <summary>
            Executes code asynchronously on the dispatcher thread. This method returns immediately even if
            it happens to be called on the dispatcher thread.
            </summary>
            <param name="callback">Code to execute</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgEnvironment">
            <summary>
            Target environment
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgEnvironment.Environment">
            <summary>
            Gets the environment keys and values
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.#ctor(dnSpy.Contracts.Debugger.DbgEnvironment)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">Other instance</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.Clear">
            <summary>
            Clears the environment
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.Remove(System.String)">
            <summary>
            Removes a key from the environment
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.Add(System.String,System.String)">
            <summary>
            Adds a key and value to the environment
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgEnvironment.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds values to the environment
            </summary>
            <param name="environment">Environment</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgImageLayout">
            <summary>
            Image layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgImageLayout.Unknown">
            <summary>
            Unknown layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgImageLayout.File">
            <summary>
            File layout
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgImageLayout.Memory">
            <summary>
            Memory layout
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgInternalAppDomain">
            <summary>
            Base class of a app domain object implemented by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgInternalAppDomain.AppDomain">
            <summary>
            Gets the app domain
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgInternalModule">
            <summary>
            Base class of a module object implemented by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgInternalModule.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgInternalRuntime">
            <summary>
            Base class of a runtime object implemented by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgInternalRuntime.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgManager">
            <summary>
            Manages all debug engines. All events are raised on the dispatcher thread.
            If you need to hook events before debugging starts, you should export an <see cref="T:dnSpy.Contracts.Debugger.IDbgManagerStartListener"/>.
            It gets called when <see cref="M:dnSpy.Contracts.Debugger.DbgManager.Start(dnSpy.Contracts.Debugger.DebugProgramOptions)"/> gets called for the first time.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.Dispatcher">
            <summary>
            Gets the dispatcher. All debugger events are raised on this thread. <see cref="M:dnSpy.Contracts.Debugger.DbgObject.Close(dnSpy.Contracts.Debugger.DbgDispatcher)"/>
            is also called on this thread including disposing of data added by eg. <see cref="M:dnSpy.Contracts.Debugger.DbgObject.GetOrCreateData``1"/>.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.Message">
            <summary>
            Raised on the debugger thread when there's a new message, eg. a process was created, a thread has exited, etc.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageProcessCreated">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageProcessExited">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageRuntimeCreated">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageRuntimeExited">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageAppDomainLoaded">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageAppDomainUnloaded">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageModuleLoaded">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageModuleUnloaded">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageThreadCreated">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageThreadExited">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageExceptionThrown">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageEntryPointBreak">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageProgramMessage">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageBoundBreakpoint">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageProgramBreak">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageStepComplete">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageSetIPComplete">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageUserMessage">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageBreak">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.MessageAsyncProgramMessage">
            <summary>
            Raised on the debugger thread when there's a new message.
            The listeners can pause the debugged program by setting <see cref="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause"/> to true.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.Start(dnSpy.Contracts.Debugger.DebugProgramOptions)">
            <summary>
            Starts debugging. Returns an error string if it failed to create a debug engine, or null on success.
            See <see cref="T:dnSpy.Contracts.Debugger.IDbgManagerStartListener"/> on how to get called the first time this method gets called.
            </summary>
            <param name="options">Options needed to start the program or attach to it</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.CanRestart">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Debugger.DbgManager.Restart"/> can be called
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.Restart">
            <summary>
            Restarts the debugged program(s)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.IsDebugging">
            <summary>
            true if a program is being debugged
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.IsDebuggingChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.IsDebugging"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.IsRunning">
            <summary>
            true if all processes are running, false if they're all paused, and null
            if some are running and some are paused.
            This property is valid only if <see cref="P:dnSpy.Contracts.Debugger.DbgManager.IsDebugging"/> is true.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.IsRunningChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.IsRunning"/> is changed, see also <see cref="E:dnSpy.Contracts.Debugger.DbgManager.DelayedIsRunningChanged"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.DelayedIsRunningChanged">
            <summary>
            Raised when all processes have been running for a little while, eg. 1 second.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.DebugTags">
            <summary>
            Gets all debug tags, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDebugTags"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.DebugTagsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.DebugTags"/> is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.ProcessPaused">
            <summary>
            Raised when a process gets paused due to some event in the process. If more than one process
            is being debugged, this is normally only raised once, for the first process.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.Processes">
            <summary>
            Gets all debugged processes. Can be empty even if <see cref="P:dnSpy.Contracts.Debugger.DbgManager.IsDebugging"/> is true
            if the process hasn't been created yet.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.ProcessesChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.Processes"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.BreakAll">
            <summary>
            Pauses all debugged processes
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.RunAll">
            <summary>
            Lets all programs run again. This is the inverse of <see cref="M:dnSpy.Contracts.Debugger.DbgManager.BreakAll"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.Run(dnSpy.Contracts.Debugger.DbgProcess)">
            <summary>
            Lets <paramref name="process"/> run again. If <see cref="P:dnSpy.Contracts.Debugger.DebuggerSettings.BreakAllProcesses"/>
            is true, all other processes will also run.
            </summary>
            <param name="process">Process to run</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.StopDebuggingAll">
            <summary>
            Stops debugging. All programs started by the debugger will be terminated. All
            other programs will be detached, if possible, else terminated.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.TerminateAll">
            <summary>
            Terminates all debugged programs
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.DetachAll">
            <summary>
            Detaches all debugged programs, if possible. If it's not possible to detach a
            program, it will be terminated.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.CanDetachWithoutTerminating">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Debugger.DbgManager.DetachAll"/> can be called without terminating any programs
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.CurrentProcess">
            <summary>
            Gets the current process
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.CurrentProcessChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.CurrentProcess"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.CurrentRuntime">
            <summary>
            Gets the current runtime
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.CurrentRuntimeChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.CurrentRuntime"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManager.CurrentThread">
            <summary>
            Gets the current thread
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.CurrentThreadChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgManager.CurrentThread"/> is changed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.ModulesRefreshed">
            <summary>
            Raised when the module's memory has been updated (eg. decrypted)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.CanDebugRuntime(System.Int32,dnSpy.Contracts.Debugger.RuntimeId)">
            <summary>
            Returns true if the runtime can be debugged
            </summary>
            <param name="pid">Process id</param>
            <param name="rid">Runtime id</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.Close(dnSpy.Contracts.Debugger.DbgObject)">
            <summary>
            Closes <paramref name="obj"/>
            </summary>
            <param name="obj">Object to close</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.Close(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Debugger.DbgObject})">
            <summary>
            Closes <paramref name="objs"/>
            </summary>
            <param name="objs">Objects to close</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.WriteMessage(System.String)">
            <summary>
            Writes a message that will be shown in the output window
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.ShowError(System.String)">
            <summary>
            Shows an error message and returns immediately
            </summary>
            <param name="errorMessage">Error message</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManager.WriteMessage(System.String,System.String)">
            <summary>
            Writes a message
            </summary>
            <param name="messageKind">Message kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds"/></param>
            <param name="message">Message</param>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgManager.DbgManagerMessage">
            <summary>
            Raised when <see cref="M:dnSpy.Contracts.Debugger.DbgManager.WriteMessage(System.String)"/> gets called. This event is raised on a random thread.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds">
            <summary>
            Predefined message kinds, see <see cref="M:dnSpy.Contracts.Debugger.DbgManager.WriteMessage(System.String,System.String)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds.Output">
            <summary>
            Output window
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds.ErrorUser">
            <summary>
            An error message that should be shown to the user
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds.StepFilter">
            <summary>
            Messages by the stepper
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgManagerMessageEventArgs">
            <summary>
            Message event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManagerMessageEventArgs.MessageKind">
            <summary>
            Gets the message kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgManagerMessageEventArgs.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgManagerMessageEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="messageKind">Message kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgManagerMessageKinds"/></param>
            <param name="message">Message</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgCurrentObject`1">
            <summary>
            Contains the current object and the object that caused the debugger to enter break mode
            </summary>
            <typeparam name="T">Type of object</typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Current">
            <summary>
            Gets the current object or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Break">
            <summary>
            Gets the object that caused the debugger to enter break mode
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgCurrentObjectChangedEventArgs`1">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.DbgCurrentObject`1"/> changed event args
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCurrentObjectChangedEventArgs`1.CurrentChanged">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Current"/> changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgCurrentObjectChangedEventArgs`1.BreakChanged">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Break"/> changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgCurrentObjectChangedEventArgs`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="currentChanged">true if <see cref="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Current"/> changed</param>
            <param name="breakChanged">true if <see cref="P:dnSpy.Contracts.Debugger.DbgCurrentObject`1.Break"/> changed</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.ProcessPausedEventArgs">
            <summary>
            Process paused event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ProcessPausedEventArgs.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ProcessPausedEventArgs.Thread">
            <summary>
            Gets the thread or null if unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ProcessPausedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgProcess,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="process">Process</param>
            <param name="thread">Thread or null if unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageKind">
            <summary>
            Debugger message kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessCreated">
            <summary>
            A process was created (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageProcessCreatedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessExited">
            <summary>
            A process has exited (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageProcessExitedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeCreated">
            <summary>
            A runtime was created (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageRuntimeCreatedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeExited">
            <summary>
            A runtime has exited (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageRuntimeExitedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainLoaded">
            <summary>
            An app domain was loaded (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageAppDomainLoadedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainUnloaded">
            <summary>
            An app domain was unloaded (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageAppDomainUnloadedEventArgs"/>). This message isn't sent if the program has exited.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleLoaded">
            <summary>
            A module was loaded (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageModuleLoadedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleUnloaded">
            <summary>
            A module was unloaded (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageModuleUnloadedEventArgs"/>). This message isn't sent if the program has exited or if its app domain has unloaded.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadCreated">
            <summary>
            A thread was created (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageThreadCreatedEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadExited">
            <summary>
            A thread has exited (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageThreadExitedEventArgs"/>). This message isn't sent if the program has exited.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ExceptionThrown">
            <summary>
            An exception was thrown (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageExceptionThrownEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.EntryPointBreak">
            <summary>
            The entry point has been reached (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs"/>).
            This message is only sent if the user chose to break at the entry point.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramMessage">
            <summary>
            Message from the debugged program (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.BoundBreakpoint">
            <summary>
            A bound breakpoint was hit (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramBreak">
            <summary>
            The program paused itself by executing a break instruction or method (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.StepComplete">
            <summary>
            Step into/over/out is complete (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.SetIPComplete">
            <summary>
            SetIP() is complete (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.UserMessage">
            <summary>
            Some message that should be shown to the user, eg. we failed to connect to the debugged process (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.Break">
            <summary>
            The program was paused by the user, or because some other program was paused for some other reason (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgMessageKind.AsyncProgramMessage">
            <summary>
            Message from the debugged program (<see cref="T:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageEventArgs">
            <summary>
            Base class of all debugger messages
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Kind">
            <summary>
            Gets the message kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageEventArgs.Pause">
            <summary>
            true if the program should be paused. It's only possible to write true to this property.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageProcessEventArgs">
            <summary>
            Process message base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProcessEventArgs.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageProcessEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgProcess)">
            <summary>
            Constructor
            </summary>
            <param name="process">Process</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageProcessCreatedEventArgs">
            <summary>
            Process created message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessCreated"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProcessCreatedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessCreated"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageProcessCreatedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgProcess)">
            <summary>
            Constructor
            </summary>
            <param name="process">Process</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageProcessExitedEventArgs">
            <summary>
            Process exited message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessExited"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProcessExitedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProcessExited"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProcessExitedEventArgs.ExitCode">
            <summary>
            Gets the exit code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageProcessExitedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgProcess,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="process">Process</param>
            <param name="exitCode">Process exit code</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageRuntimeEventArgs">
            <summary>
            Runtime message base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageRuntimeEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageRuntimeEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageRuntimeCreatedEventArgs">
            <summary>
            Runtime created message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeCreated"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageRuntimeCreatedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeCreated"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageRuntimeCreatedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageRuntimeExitedEventArgs">
            <summary>
            Runtime exited message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeExited"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageRuntimeExitedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.RuntimeExited"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageRuntimeExitedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageAppDomainEventArgs">
            <summary>
            App domain message base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAppDomainEventArgs.AppDomain">
            <summary>
            Gets the app domain
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageAppDomainEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgAppDomain)">
            <summary>
            Constructor
            </summary>
            <param name="appDomain">App domain</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageAppDomainLoadedEventArgs">
            <summary>
            App domain loaded message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainLoaded"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAppDomainLoadedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainLoaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageAppDomainLoadedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgAppDomain)">
            <summary>
            Constructor
            </summary>
            <param name="appDomain">App domain</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageAppDomainUnloadedEventArgs">
            <summary>
            App domain unloaded message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainUnloaded"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAppDomainUnloadedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AppDomainUnloaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageAppDomainUnloadedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgAppDomain)">
            <summary>
            Constructor
            </summary>
            <param name="appDomain">App domain</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageModuleEventArgs">
            <summary>
            Module message base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageModuleEventArgs.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageModuleEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageModuleLoadedEventArgs">
            <summary>
            Module loaded message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleLoaded"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageModuleLoadedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleLoaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageModuleLoadedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageModuleUnloadedEventArgs">
            <summary>
            Module unloaded message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleUnloaded"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageModuleUnloadedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ModuleUnloaded"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageModuleUnloadedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageThreadEventArgs">
            <summary>
            Thread message base class
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageThreadEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageThreadEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageThreadCreatedEventArgs">
            <summary>
            Thread created message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadCreated"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageThreadCreatedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadCreated"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageThreadCreatedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageThreadExitedEventArgs">
            <summary>
            Thread exited message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadExited"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageThreadExitedEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ThreadExited"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageThreadExitedEventArgs.ExitCode">
            <summary>
            Gets the exit code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageThreadExitedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
            <param name="exitCode">Thread exit code</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageExceptionThrownEventArgs">
            <summary>
            Exception thrown message (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ExceptionThrown"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageExceptionThrownEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ExceptionThrown"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageExceptionThrownEventArgs.Exception">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageExceptionThrownEventArgs.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgException)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Exception</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs">
            <summary>
            The entry point has been reached (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.EntryPointBreak"/>).
            This message is only sent if the user chose to break at the entry point.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.EntryPointBreak"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs.Thread">
            <summary>
            Gets the thread or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageEntryPointBreakEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
            <param name="thread">Thread or null if it's unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs">
            <summary>
            Message from the debugged program (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramMessage"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs.Message">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs.Thread">
            <summary>
            Gets the thread or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageProgramMessageEventArgs.#ctor(System.String,dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="runtime">Runtime</param>
            <param name="thread">Thread or null if it's unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs">
            <summary>
            A bound breakpoint was hit (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.BoundBreakpoint"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.BoundBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs.BoundBreakpoint">
            <summary>
            Gets the bound breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs.Thread">
            <summary>
            Gets the thread or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageBoundBreakpointEventArgs.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="boundBreakpoint">Bound breakpoint</param>
            <param name="thread">Thread or null if it's unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs">
            <summary>
            The program paused itself by executing a break instruction or method (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramBreak"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.ProgramBreak"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs.Thread">
            <summary>
            Gets the thread or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageProgramBreakEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
            <param name="thread">Thread or null if it's unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs">
            <summary>
            Step into/over/out is complete (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.StepComplete"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.StepComplete"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.Error">
            <summary>
            Gets the error message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.HasError">
            <summary>
            true if there was an error. Error message is in <see cref="P:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.Error"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageStepCompleteEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
            <param name="error">Error message or null if none</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs">
            <summary>
            SetIP() is complete (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.SetIPComplete"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.SetIPComplete"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.FramesInvalidated">
            <summary>
            true if all frames in the thread have been invalidated
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.Error">
            <summary>
            Gets the error message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.HasError">
            <summary>
            true if there was an error. Error message is in <see cref="P:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.Error"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageSetIPCompleteEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
            <param name="framesInvalidated">true if all frames in the thread have been invalidated</param>
            <param name="error">Error message or null if none</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs">
            <summary>
            A message that should be shown to the user
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.UserMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs.MessageKind">
            <summary>
            Gets the message kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs.#ctor(dnSpy.Contracts.Debugger.UserMessageKind,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="messageKind">Message kind</param>
            <param name="message">Message</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.UserMessageKind">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.DbgMessageUserMessageEventArgs"/> message kinds
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.UserMessageKind.CouldNotConnect">
            <summary>
            We failed to connect to the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.UserMessageKind.CouldNotBreak">
            <summary>
            Could not break the debugged process
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs">
            <summary>
            The program was paused by the user, or because some other program was paused for some other reason (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.Break"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.Break"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs.Thread">
            <summary>
            Gets the thread or null if it's unknown
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageBreakEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Constructor
            </summary>
            <param name="runtime">Runtime</param>
            <param name="thread">Thread or null if it's unknown</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.AsyncProgramMessageSource">
            <summary>
            Message source kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.AsyncProgramMessageSource.Other">
            <summary>
            Some other source
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.AsyncProgramMessageSource.StandardOutput">
            <summary>
            Standard output text
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.AsyncProgramMessageSource.StandardError">
            <summary>
            Standard error text
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs">
            <summary>
            Message from the debugged program (<see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AsyncProgramMessage"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs.Kind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.DbgMessageKind.AsyncProgramMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs.Source">
            <summary>
            Gets the message source kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs.Message">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgMessageAsyncProgramMessageEventArgs.#ctor(dnSpy.Contracts.Debugger.AsyncProgramMessageSource,System.String,dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source</param>
            <param name="message">Message</param>
            <param name="runtime">Runtime</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgModule">
            <summary>
            A module in a process
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgModule.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.AppDomain">
            <summary>
            Gets the app domain or null if it's a process module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.InternalModule">
            <summary>
            Gets the module object created by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.IsExe">
            <summary>
            true if it's an EXE file, false if it's a DLL file
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.HasAddress">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/> and <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/> are valid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Address">
            <summary>
            Address of module. Only valid if <see cref="P:dnSpy.Contracts.Debugger.DbgModule.HasAddress"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Size">
            <summary>
            Size of module. Only valid if <see cref="P:dnSpy.Contracts.Debugger.DbgModule.HasAddress"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout">
            <summary>
            Image layout
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Name">
            <summary>
            Name of module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Filename">
            <summary>
            Filename if it exists on disk, else it could be any longer name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic">
            <summary>
            true if it's a dynamic module (the application can add more types and members to the module at runtime)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory">
            <summary>
            true if it's an in-memory module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized">
            <summary>
            true if it's an optimized module, false if it's an unoptimized module, and null if it's a native module.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Order">
            <summary>
            Load order of this module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp">
            <summary>
            Timestamp (UTC) of module (eg. as found in the PE header) or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.Version">
            <summary>
            Gets the version, eg. the file version, see <see cref="T:System.Diagnostics.FileVersionInfo"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgModule.Refreshed">
            <summary>
            Raised when the module's memory has been updated (eg. decrypted)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgModule.RefreshedVersion">
            <summary>
            Gets incremented when the module gets refreshed (<see cref="E:dnSpy.Contracts.Debugger.DbgModule.Refreshed"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgModuleMemoryRefreshedNotifier">
            <summary>
            Notifies the debugger that the memory of a module has been updated (eg. decrypted)
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgModuleMemoryRefreshedNotifier.ModulesRefreshed">
            <summary>
            Raised when the module's memory has been updated (eg. decrypted). The debugger will
            try to reset all breakpoints.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.ModulesRefreshedEventArgs">
            <summary>
            <see cref="E:dnSpy.Contracts.Debugger.DbgModuleMemoryRefreshedNotifier.ModulesRefreshed"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ModulesRefreshedEventArgs.Modules">
            <summary>
            Gets the modules
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ModulesRefreshedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ModulesRefreshedEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgModule[])">
            <summary>
            Constructor
            </summary>
            <param name="modules">Modules</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgObject">
            <summary>
            Base class of debugger objects that only exist while debugging
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgObject.IsClosed">
            <summary>
            true if the instance has been closed
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgObject.Closed">
            <summary>
            Raised when it's closed. Data methods eg. <see cref="M:dnSpy.Contracts.Debugger.DbgObject.TryGetData``1(``0@)"/> can be called
            but some other methods could throw or can't be called. After all handlers have been notified,
            all data get disposed (if they implement <see cref="T:System.IDisposable"/>).
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.Close(dnSpy.Contracts.Debugger.DbgDispatcher)">
            <summary>
            Closes the instance. This method must only be executed on the dispatcher thread
            
            This method must only be called by the owner object.
            </summary>
            <param name="dispatcher">Dispatcher</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.CloseCore(dnSpy.Contracts.Debugger.DbgDispatcher)">
            <summary>
            Called by <see cref="M:dnSpy.Contracts.Debugger.DbgObject.Close(dnSpy.Contracts.Debugger.DbgDispatcher)"/> after it has raised <see cref="E:dnSpy.Contracts.Debugger.DbgObject.Closed"/> and before it disposes
            of all data. This method is called on the dispatcher thread (see <see cref="P:dnSpy.Contracts.Debugger.DbgManager.Dispatcher"/>)
            </summary>
            <param name="dispatcher">Dispatcher</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.HasData``1">
            <summary>
            Checks if the data exists or is null
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.GetOrCreateData``1">
            <summary>
            Gets or creates data. If it implements <see cref="T:System.IDisposable"/>, it will get disposed
            when this object gets closed.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.TryGetData``1(``0@)">
            <summary>
            Gets data
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="value">Result</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.GetData``1">
            <summary>
            Gets existing data or throws if the data doesn't exist
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgObject.GetOrCreateData``1(System.Func{``0})">
            <summary>
            Gets or creates data. If it implements <see cref="T:System.IDisposable"/>, it will get disposed
            when this object gets closed.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="create">Creates the data if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgProcess">
            <summary>
            A debugged process
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgProcess.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.DbgManager">
            <summary>
            Gets the owner debug manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Id">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Runtimes">
            <summary>
            Gets all runtimes
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgProcess.RuntimesChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgProcess.Runtimes"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Bitness">
            <summary>
            Gets the process bitness (32 or 64)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.PointerSize">
            <summary>
            Gets the size of a pointer
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Architecture">
            <summary>
            Gets the architecture
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.OperatingSystem">
            <summary>
            Gets the operating system
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.State">
            <summary>
            Gets the process state
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Filename">
            <summary>
            Gets the filename or an empty string if it's unknown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Name">
            <summary>
            Gets the process name or an empty string if it's unknown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Debugging">
            <summary>
            What is being debugged. This is shown in the UI (eg. Processes window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgProcess.ThreadsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgProcess.Threads"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.IsRunning">
            <summary>
            true if the process is running, false if it's paused or terminated (see <see cref="P:dnSpy.Contracts.Debugger.DbgProcess.State"/>)
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgProcess.IsRunningChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgProcess.IsRunning"/> is changed, see also <see cref="E:dnSpy.Contracts.Debugger.DbgProcess.DelayedIsRunningChanged"/>
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgProcess.DelayedIsRunningChanged">
            <summary>
            Raised when the process has been running for a little while, eg. 1 second.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.ReadMemory(System.UInt64,System.Void*,System.Int32)">
            <summary>
            Reads memory. Unreadable memory is returned as 0s.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="destination">Destination address</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.ReadMemory(System.UInt64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads memory. Unreadable memory is returned as 0s.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="destination">Destination buffer</param>
            <param name="destinationIndex">Destination index</param>
            <param name="size">Number of bytes to read</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.ReadMemory(System.UInt64,System.Byte[])">
            <summary>
            Reads memory. Unreadable memory is returned as 0s.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="destination">Destination buffer</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.ReadMemory(System.UInt64,System.Int32)">
            <summary>
            Reads memory. Unreadable memory is returned as 0s.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="size">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.WriteMemory(System.UInt64,System.Void*,System.Int32)">
            <summary>
            Writes memory.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="source">Source address</param>
            <param name="size">Number of bytes to write</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.WriteMemory(System.UInt64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes memory.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="source">Source buffer</param>
            <param name="sourceIndex">Source index</param>
            <param name="size">Number of bytes to write</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.WriteMemory(System.UInt64,System.Byte[])">
            <summary>
            Writes memory.
            </summary>
            <param name="address">Address in the debugged process</param>
            <param name="source">Source buffer</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgProcess.ShouldDetach">
            <summary>
            true if the process gets detached when debugging stops (<see cref="M:dnSpy.Contracts.Debugger.DbgProcess.StopDebugging"/>),
            false if the process gets terminated.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.StopDebugging">
            <summary>
            Stops debugging. This will either detach from the process or terminate it depending on <see cref="P:dnSpy.Contracts.Debugger.DbgProcess.ShouldDetach"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.Detach">
            <summary>
            Detaches the process, if possible, else it will be terminated
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.Terminate">
            <summary>
            Terminates the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.Break">
            <summary>
            Pauses the process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgProcess.Run">
            <summary>
            Lets the process run again
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgArchitecture">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgArchitecture.X86">
            <summary>
            x86, 32-bit
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgArchitecture.X64">
            <summary>
            x64, 64-bit
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgArchitecture.Arm">
            <summary>
            32-bit ARM
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgArchitecture.Arm64">
            <summary>
            64-bit ARM
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgOperatingSystem">
            <summary>
            Operating system
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgOperatingSystem.Windows">
            <summary>
            Windows OS
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgOperatingSystem.MacOS">
            <summary>
            OSX/MacOS OS
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgOperatingSystem.Linux">
            <summary>
            Linux OS
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgOperatingSystem.FreeBSD">
            <summary>
            FreeBSD OS
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgProcessState">
            <summary>
            Process state
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgProcessState.Running">
            <summary>
            The process is running
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgProcessState.Paused">
            <summary>
            The process is paused
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgProcessState.Terminated">
            <summary>
            The process is terminated
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgRuntime">
            <summary>
            A runtime in a process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Id">
            <summary>
            Gets the process unique runtime id. There must be exactly one such id per process.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Guid">
            <summary>
            Gets the runtime GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.RuntimeKindGuid">
            <summary>
            Gets the runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Name">
            <summary>
            Gets the runtime name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Tags">
            <summary>
            Gets all runtime tags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.InternalRuntime">
            <summary>
            Gets the runtime object created by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.AppDomains">
            <summary>
            Gets all app domains
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgRuntime.AppDomainsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.AppDomains"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Modules">
            <summary>
            Gets all modules
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgRuntime.ModulesChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Modules"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.Threads">
            <summary>
            Gets all threads
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgRuntime.ThreadsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Threads"/> is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgRuntime.BreakInfos">
            <summary>
            Gets the break infos, it gets updated when the runtime breaks and cleared when it continues.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnContinue(dnSpy.Contracts.Debugger.DbgObject)">
            <summary>
            Closes <paramref name="obj"/> just before the runtime continues (or when it gets closed if it never continues)
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnContinue(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Debugger.DbgObject})">
            <summary>
            Closes <paramref name="objs"/> just before the runtime continues (or when it gets closed if it never continues)
            </summary>
            <param name="objs">Objects</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnExit(dnSpy.Contracts.Debugger.DbgObject)">
            <summary>
            Closes <paramref name="obj"/> when the runtime closes
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnExit(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Debugger.DbgObject})">
            <summary>
            Closes <paramref name="objs"/> when the runtime closes
            </summary>
            <param name="objs">Objects</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnExit(System.IDisposable)">
            <summary>
            Closes <paramref name="obj"/> when the runtime closes
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgRuntime.CloseOnExit(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Closes <paramref name="objs"/> when the runtime closes
            </summary>
            <param name="objs">Objects</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgBreakInfoKind">
            <summary>
            Break info kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgBreakInfoKind.Unknown">
            <summary>
            Unknown break reason
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgBreakInfoKind.Connected">
            <summary>
            We've connected to the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.DbgBreakInfoKind.Message">
            <summary>
            It's paused due to some debug message. <see cref="P:dnSpy.Contracts.Debugger.DbgBreakInfo.Data"/> is a <see cref="T:dnSpy.Contracts.Debugger.DbgMessageEventArgs"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgBreakInfo">
            <summary>
            Break info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgBreakInfo.Kind">
            <summary>
            Gets the kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgBreakInfo.Data">
            <summary>
            Gets the data, see <see cref="T:dnSpy.Contracts.Debugger.DbgBreakInfoKind"/> for more info
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgBreakInfo.#ctor(dnSpy.Contracts.Debugger.DbgBreakInfoKind,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="kind">Kind</param>
            <param name="data">Data</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgBreakInfo.#ctor(dnSpy.Contracts.Debugger.DbgMessageEventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="message">Debug message</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgBreakInfo.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgStateInfo">
            <summary>
            Contains state and localized state that can be shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgStateInfo.State">
            <summary>
            Non-localized string
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgStateInfo.LocalizedState">
            <summary>
            Localized string (shown in the UI)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="state">State</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="state">State (non-localized)</param>
            <param name="localizedState">Localized state</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.Equals(dnSpy.Contracts.Debugger.DbgStateInfo)">
            <summary>
            Equals()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgStateInfo.ToString">
            <summary>
            Returns <see cref="P:dnSpy.Contracts.Debugger.DbgStateInfo.LocalizedState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DbgThread">
            <summary>
            A thread in a debugged process
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DbgThread.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain">
            <summary>
            Gets the app domain or null if it's a process thread
            </summary>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.IsMain">
            <summary>
            true if this is the main thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.Kind">
            <summary>
            Gets the thread kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedThreadKinds"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.Id">
            <summary>
            Gets the id of this thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId">
            <summary>
            Gets the managed id of this thread or null if it's unknown or if it's not a managed thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.Name">
            <summary>
            Gets the thread name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.UIName">
            <summary>
            Gets the thread name shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount">
            <summary>
            Gets the suspended count. It's 0 if the thread isn't suspended, and greater than zero if it's suspended.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DbgThread.State">
            <summary>
            Thread state
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.HasName">
            <summary>
            Returns true if the thread has a name
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.Freeze">
            <summary>
            Freezes the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.Thaw">
            <summary>
            Thaws the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.CreateStackWalker">
            <summary>
            Creates a new <see cref="T:dnSpy.Contracts.Debugger.CallStack.DbgStackWalker"/> instance that can be used to get the call stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.GetTopStackFrame">
            <summary>
            Gets the top stack frame or null if there's none
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.GetFrames(System.Int32)">
            <summary>
            Gets the first <paramref name="count"/> frames.
            The returned frame count can be less than <paramref name="count"/> if there's not enough frames available.
            </summary>
            <param name="count">Max number of frames to return</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.CreateStepper">
            <summary>
            Creates a stepper.
            The caller must close the returned instance by calling <see cref="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Close"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.SetIP(dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Sets a new instruction pointer
            </summary>
            <param name="location">New location</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DbgThread.CanSetIP(dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Checks if <see cref="M:dnSpy.Contracts.Debugger.DbgThread.SetIP(dnSpy.Contracts.Debugger.Code.DbgCodeLocation)"/> can be called
            </summary>
            <param name="location">New location</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DebuggerSettings">
            <summary>
            Global debugger settings. This class is thread safe. Listeners will be notified
            on a random thread.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.DebuggerSettings.PropertyChanged">
            <summary>
            Raised when a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DebuggerSettings.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:dnSpy.Contracts.Debugger.DebuggerSettings.PropertyChanged"/>
            </summary>
            <param name="propName">Name of property that got changed</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.UseHexadecimal">
            <summary>
            true to use hexadecimal numbers, false to use decimal numbers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.UseDigitSeparators">
            <summary>
            true to use digit separators
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.SyntaxHighlight">
            <summary>
            true to colorize debugger tool windows and other debugger UI objects
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.AutoOpenLocalsWindow">
            <summary>
            true to auto open the locals window when the debugger starts
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.UseMemoryModules">
            <summary>
            Use modules loaded from memory instead of files. Useful if a module gets decrypted at runtime.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.PropertyEvalAndFunctionCalls">
            <summary>
            true if properties and methods can be executed (used by locals / watch windows)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.UseStringConversionFunction">
            <summary>
            Use ToString() or similar method to get a string representation of an object (used by locals / watch windows)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.PreventManagedDebuggerDetection">
            <summary>
            true to prevent detection of managed debuggers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.AntiIsDebuggerPresent">
            <summary>
            true to patch IsDebuggerPresent() so it can't be used to detect native debuggers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.AntiCheckRemoteDebuggerPresent">
            <summary>
            true to patch CheckRemoteDebuggerPresent() so it can't be used to detect native debuggers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.IgnoreBreakInstructions">
            <summary>
            true to ignore break instructions and <see cref="M:System.Diagnostics.Debugger.Break"/> method calls
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.BreakAllProcesses">
            <summary>
            true to break all processes when one process breaks
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.EnableManagedDebuggingAssistants">
            <summary>
            true to enable Managed Debugging Assistants (MDA)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.HighlightChangedVariables">
            <summary>
            Highlights the value of a variable that has changed in variables windows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowRawStructureOfObjects">
            <summary>
            Shows raw structure of objects in variables windows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.SortParameters">
            <summary>
            Sort parameters (locals window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.SortLocals">
            <summary>
            Sort locals (locals window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.GroupParametersAndLocalsTogether">
            <summary>
            Group parameters and locals together (locals window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowCompilerGeneratedVariables">
            <summary>
            Show compiler generated variables (locals/autos window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowDecompilerGeneratedVariables">
            <summary>
            Show decompiler generated variables (locals/autos window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.HideCompilerGeneratedMembers">
            <summary>
            Hide compiler generated members in variables windows (respect debugger attributes, eg. <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/>)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.RespectHideMemberAttributes">
            <summary>
            Respect attributes that can hide a member, eg. <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute"/> and <see cref="F:System.Diagnostics.DebuggerBrowsableState.Never"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.HideDeprecatedError">
            <summary>
            Hide deprecated members
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.SuppressJITOptimization_SystemModules">
            <summary>
            Suppress JIT optimization on module load (system modules). If false, the code will be optimized and
            much more difficult to debug (it will be like when attaching to a process).
            System modules are all non-program modules (eg. GAC assemblies).
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.SuppressJITOptimization_ProgramModules">
            <summary>
            Suppress JIT optimization on module load (program modules). If false, the code will be optimized and
            much more difficult to debug (it will be like when attaching to a process).
            All modules in the same folder, or sub folder, as the main executable are considered program modules.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.FocusActiveProcess">
            <summary>
            Give focus to the active process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.FocusDebuggerWhenProcessBreaks">
            <summary>
            Give focus to the debugger when eg. a breakpoint is hit
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowReturnValues">
            <summary>
            Show return values in Locals window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.RedirectGuiConsoleOutput">
            <summary>
            Redirect GUI applications' console output to the Output window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowOnlyPublicMembers">
            <summary>
            Show only public members in variables windows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowRawLocals">
            <summary>
            Show all locals. Captured variables aren't shown, their display classes are shown instead.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.AsyncDebugging">
            <summary>
            Async debugging (step over await statements, step out of async methods)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.StepOverPropertiesAndOperators">
            <summary>
            Step over properties and operators
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.IgnoreUnhandledExceptions">
            <summary>
            Ignore unhandled exceptions
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.DebuggerSettings.FullString">
            <summary>
            Show the full string value even if it's a very long string
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.DebugProgramOptions">
            <summary>
            Debug program base class
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.DebugProgramOptions.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider">
            <summary>
            Returns a method's native code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="frame">Stack frame</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="frame">Stack frame</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="boundBreakpoint">A bound breakpoint</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="boundBreakpoint">A bound breakpoint</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="runtime">Runtime</param>
            <param name="location">Code location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="runtime">Runtime</param>
            <param name="location">Code location</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult">
            <summary>
            Native code result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult.Code">
            <summary>
            Native code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult.SymbolResolver">
            <summary>
            Symbol resolver or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult.Header">
            <summary>
            Header or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult.#ctor(dnSpy.Contracts.Disassembly.NativeCode,dnSpy.Contracts.Disassembly.ISymbolResolver,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="code">Native code</param>
            <param name="symbolResolver">Symbol resolver or null</param>
            <param name="header">Header or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions">
            <summary>
            Native code options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions.ShowILCode">
            <summary>
            Show IL code, if available
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions.ShowCode">
            <summary>
            Show source code or decompiled code, if available
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider">
            <summary>
            Returns native method bodies. Use <see cref="T:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute"/> to
            export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="frame">Stack frame</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="frame">Stack frame</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="boundBreakpoint">A bound breakpoint</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="boundBreakpoint">A bound breakpoint</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.CanGetNativeCode(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Checks if it's possible to get native code
            </summary>
            <param name="runtime">Runtime</param>
            <param name="location">Code location</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider.TryGetNativeCode(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.Disassembly.DbgNativeCodeOptions,dnSpy.Contracts.Debugger.Disassembly.GetNativeCodeResult@)">
            <summary>
            Tries to get the native code
            </summary>
            <param name="runtime">Runtime</param>
            <param name="location">Code location</param>
            <param name="options">Options</param>
            <param name="result">Native code if successful</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.IDbgRuntimeNativeCodeProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.IDbgRuntimeNativeCodeProviderMetadata.Guid">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.Guid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.IDbgRuntimeNativeCodeProviderMetadata.RuntimeKindGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.RuntimeKindGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.IDbgRuntimeNativeCodeProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Disassembly.DbgRuntimeNativeCodeProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.#ctor(System.String,System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="guid">Runtime GUID or null, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/></param>
            <param name="runtimeKindGuid">Runtime kind GUID or null, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.Guid">
            <summary>
            Gets the runtime GUID or null, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.RuntimeKindGuid">
            <summary>
            Gets the runtime kind GUID or null, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Disassembly.ExportDbgRuntimeNativeCodeProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame">
            <summary>
            Stack frame implemented by a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.Module">
            <summary>
            Gets the module or null if it's unknown
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.Location">
            <summary>
            Gets the location or null if none. Can be passed to <see cref="M:dnSpy.Contracts.Documents.ReferenceNavigatorService.GoTo(System.Object,System.Object[])"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.FunctionOffset">
            <summary>
            Gets the offset of the IP relative to the start of the function
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.FunctionToken">
            <summary>
            Gets the function token or <see cref="F:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.InvalidFunctionToken"/> if it doesn't have a token.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.InvalidFunctionToken">
            <summary>
            Invalid function token
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.TryFormat(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo,System.Threading.CancellationToken)">
            <summary>
            Formats the stack frame or returns false
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="options">Stack frame options</param>
            <param name="valueOptions">Value option</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame.OnFrameCreated(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame)">
            <summary>
            Called after the <see cref="T:dnSpy.Contracts.Debugger.CallStack.DbgStackFrame"/> has been created
            </summary>
            <param name="frame">Stack frame</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackWalker">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackFrame"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.CallStack.DbgEngineStackWalker.GetNextStackFrames(System.Int32)">
            <summary>
            Gets the next frames or an empty list if there are no more frames
            </summary>
            <param name="maxFrames">Max number of frames to return</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngine">
            <summary>
            A debug engine contains all the logic to control the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngine.StartKind">
            <summary>
            How was the debugged process started?
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngine.RuntimeInfo">
            <summary>
            Contains properties used to create a <see cref="T:dnSpy.Contracts.Debugger.DbgRuntime"/>. This property is called
            after the engine has connected and just before the <see cref="T:dnSpy.Contracts.Debugger.DbgRuntime"/> instance is
            created.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngine.DebugTags">
            <summary>
            Gets all debug tags, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDebugTags"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngine.Debugging">
            <summary>
            What is being debugged. This is shown in the UI (eg. Processes window)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Start(dnSpy.Contracts.Debugger.DebugProgramOptions)">
            <summary>
            Called when the engine can start or attach to the debugged process. This method is called shortly after
            this instance gets created by a call to <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgEngineProvider.Create(dnSpy.Contracts.Debugger.DbgManager,dnSpy.Contracts.Debugger.DebugProgramOptions)"/>.
            It must send a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected"/> message when it has connected to the program or
            if it failed.
            </summary>
            <param name="options">Same options that were passed to <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgEngineProvider.Create(dnSpy.Contracts.Debugger.DbgManager,dnSpy.Contracts.Debugger.DebugProgramOptions)"/></param>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Engine.DbgEngine.Message">
            <summary>
            Raised when there's a new message. It can be raised on any thread.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.CreateInternalRuntime(dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Debugger.DbgInternalRuntime"/> instance. It's called by the runtime constructor.
            </summary>
            <param name="runtime">Runtime instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.OnConnected(dnSpy.Contracts.Debugger.Engine.DbgObjectFactory,dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Called when its connected message has been received by <see cref="T:dnSpy.Contracts.Debugger.DbgManager"/>
            </summary>
            <param name="objectFactory">Object factory</param>
            <param name="runtime">Runtime</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Break">
            <summary>
            Pauses the debugged program, if it's not already paused. This is an asynchronous method.
            Once the program is paused (even if it already was paused), message <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak"/>
            must be sent.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Run">
            <summary>
            Lets the program run again. This is an asynchronous method. No message is sent.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Terminate">
            <summary>
            Terminates the debugged program. This is an asynchronous method.
            
            This method gets called when the user chooses Terminate All from the Debug menu
            
            When the program has been terminated or detached, message <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected"/>
            must be sent.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngine.CanDetach">
            <summary>
            true if the engine can detach from the debugged program without terminating it.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Detach">
            <summary>
            Detaches from the debugged program. If it's not possible, the program must be terminated.
            This is an asynchronous method.
            
            This method gets called when the user chooses Detach All from the Debug menu.
            
            When the program has been terminated or detached, message <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected"/>
            must be sent.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Freeze(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Freezes the thread
            </summary>
            <param name="thread">Thread</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Thaw(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Thaws the thread
            </summary>
            <param name="thread">Thread</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.RemoveBreakpoints(dnSpy.Contracts.Debugger.DbgModule[],dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint[],System.Boolean)">
            <summary>
            Removes all breakpoints. There's no guarantee that this method will be called to delete all bound breakpoints.
            To always get notified when a bound breakpoint gets deleted, add custom data that implements <see cref="T:System.IDisposable"/>
            when creating the bound breakpoint, see eg. <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Create``1(dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo{``0}[])"/>
            </summary>
            <param name="modules">Modules</param>
            <param name="boundBreakpoints">Bound breakpoints</param>
            <param name="includeNonModuleBreakpoints">If false, remove breakpoints that exist in <paramref name="modules"/>, and if true,
            remove breakpoints that exist in <paramref name="modules"/> and all breakpoints not in a <see cref="T:dnSpy.Contracts.Debugger.DbgModule"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.AddBreakpoints(dnSpy.Contracts.Debugger.DbgModule[],dnSpy.Contracts.Debugger.Code.DbgCodeLocation[],System.Boolean)">
            <summary>
            Adds all breakpoints. To get notified when a bound breakpoint gets deleted, add custom data that implements
            <see cref="T:System.IDisposable"/> when creating the bound breakpoint, see eg. <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Create``1(dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo{``0}[])"/>
            </summary>
            <param name="modules">Modules</param>
            <param name="locations">Breakpoint locations. The engine can ignore non-supported locations.</param>
            <param name="includeNonModuleBreakpoints">If false, add breakpoints that exist in <paramref name="modules"/>, and if true,
            add breakpoints that exist in <paramref name="modules"/> and all breakpoints not in a <see cref="T:dnSpy.Contracts.Debugger.DbgModule"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.CreateStackWalker(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Creates a stack walker
            </summary>
            <param name="thread">Thread created by this engine</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.CreateStepper(dnSpy.Contracts.Debugger.DbgThread)">
            <summary>
            Creates a stepper
            </summary>
            <param name="thread">Thread to step</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.SetIP(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Sets a new instruction pointer
            </summary>
            <param name="thread">Thread</param>
            <param name="location">New location</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.CanSetIP(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)">
            <summary>
            Checks if <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.SetIP(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Code.DbgCodeLocation)"/> can be called
            </summary>
            <param name="thread">Thread</param>
            <param name="location">New location</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgStartKind">
            <summary>
            Start kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgStartKind.Start">
            <summary>
            The program was started by the debugger
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgStartKind.Attach">
            <summary>
            The debugger attached to the program after it was started by someone else
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain">
            <summary>
            A class that can update a <see cref="T:dnSpy.Contracts.Debugger.DbgAppDomain"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.AppDomain">
            <summary>
            Gets the app domain
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.Remove(dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Removes the app domain and disposes of it. The engine has paused the program.
            </summary>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateOptions">
            <summary>
            Properties to update
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateOptions.Name">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateOptions.Id">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateName(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name"/>
            </summary>
            <param name="name">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateId(System.Int32)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id"/>
            </summary>
            <param name="id">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.Update(dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain.UpdateOptions,System.String,System.Int32)">
            <summary>
            Updates <see cref="T:dnSpy.Contracts.Debugger.DbgAppDomain"/> properties
            </summary>
            <param name="options">Options</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id"/> value</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint">
            <summary>
            A class that can update a <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.BoundCodeBreakpoint">
            <summary>
            Gets the bound breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.Remove">
            <summary>
            Removes this bound breakpoint
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.Remove(dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint[])">
            <summary>
            Removes bound breakpoints
            </summary>
            <param name="breakpoints">Breakpoints to remove</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions">
            <summary>
            Properties to update
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions.Module">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Module"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions.Address">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Address"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions.Message">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Message"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateModule(dnSpy.Contracts.Debugger.DbgModule)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Module"/>
            </summary>
            <param name="module">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateAddress(System.UInt64)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Address"/>
            </summary>
            <param name="address">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateMessage(dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Message"/>
            </summary>
            <param name="message">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.Update(dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint.UpdateOptions,dnSpy.Contracts.Debugger.DbgModule,System.UInt64,dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage)">
            <summary>
            Updates <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint"/> properties
            </summary>
            <param name="options">Options</param>
            <param name="module">New <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Module"/> value</param>
            <param name="address">New <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Address"/> value</param>
            <param name="message">New <see cref="P:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint.Message"/> value</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind">
            <summary>
            Bound breakpoint message kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind.None">
            <summary>
            No warning or error, the breakpoint will break when hit
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind.CustomWarning">
            <summary>
            Custom warning message
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind.CustomError">
            <summary>
            Custom error message
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind.FunctionNotFound">
            <summary>
            Function wasn't found
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessageKind.CouldNotCreateBreakpoint">
            <summary>
            A breakpoint could not be created
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage">
            <summary>
            Bound breakpoint message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.Kind">
            <summary>
            Message kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.CreateNoError">
            <summary>
            Creates a no-error message
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.CreateCustomWarning(System.String)">
            <summary>
            Creates a custom warning message
            </summary>
            <param name="message">Message</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.CreateCustomError(System.String)">
            <summary>
            Creates a custom error message
            </summary>
            <param name="message">Message</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.CreateFunctionNotFound(System.String)">
            <summary>
            Creates a function-not-found message
            </summary>
            <param name="function">Name of function</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage.CreateCouldNotCreateBreakpoint">
            <summary>
            Creates a could-not-create-breakpoint message
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineMessage">
            <summary>
            Base class of messages created by a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineMessage.MessageKind">
            <summary>
            Gets the message kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineMessage.MessageFlags">
            <summary>
            Gets the message flags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineMessage.#ctor(dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Connected"/> event. Should be the first event sent by the
            debug engine. If it couldn't connect, no more messages need to be sent after this message
            is sent.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Connected"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected.ErrorMessage">
            <summary>
            The error message or null if there's no error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected.ProcessId">
            <summary>
            Gets the process id
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected.#ctor(System.Int32,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="processId">Process id</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageConnected.#ctor(System.String,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage">Error message</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Disconnected"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Disconnected"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected.ExitCode">
            <summary>
            Gets the exit code
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageDisconnected.#ctor(System.Int32,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="exitCode">Exit code</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Break"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Break"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak.ErrorMessage">
            <summary>
            The error message or null if there's no error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak.Thread">
            <summary>
            Gets the thread or null if it's not known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak.#ctor(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread or null if it's not known</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageBreak.#ctor(System.String,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage">Error message</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageEntryPointBreak">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.EntryPointBreak"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageEntryPointBreak.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.EntryPointBreak"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageEntryPointBreak.Thread">
            <summary>
            Gets the thread or null if it's not known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageEntryPointBreak.#ctor(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread or null if it's not known</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramMessage">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramMessage"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramMessage.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramMessage.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramMessage.Thread">
            <summary>
            Gets the thread or null if it's not known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramMessage.#ctor(System.String,dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="thread">Thread or null if it's not known</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageBreakpoint">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Breakpoint"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreakpoint.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Breakpoint"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreakpoint.BoundBreakpoint">
            <summary>
            Gets the breakpoint
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageBreakpoint.Thread">
            <summary>
            Gets the thread or null if it's not known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageBreakpoint.#ctor(dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint,dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="boundBreakpoint">Breakpoint</param>
            <param name="thread">Thread or null if it's not known</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramBreak">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramBreak"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramBreak.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramBreak"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramBreak.Thread">
            <summary>
            Gets the thread or null if it's not known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageProgramBreak.#ctor(dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread or null if it's not known</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.SetIPComplete"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.SetIPComplete"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete.FramesInvalidated">
            <summary>
            true if all frames in the thread have been invalidated
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete.Error">
            <summary>
            Gets the error string or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageSetIPComplete.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.Boolean,System.String,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
            <param name="framesInvalidated">true if all frames in the thread have been invalidated</param>
            <param name="error">Error string or null if none</param>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgMessageAsyncProgramMessage">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.AsyncProgramMessage"/> event
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageAsyncProgramMessage.MessageKind">
            <summary>
            Returns <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.AsyncProgramMessage"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageAsyncProgramMessage.Source">
            <summary>
            Gets the message source
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgMessageAsyncProgramMessage.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgMessageAsyncProgramMessage.#ctor(dnSpy.Contracts.Debugger.AsyncProgramMessageSource,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source</param>
            <param name="message">Message</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags">
            <summary>
            Message flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags.Pause">
            <summary>
            Set if the process should be paused, false if other code gets to decide if it should pause
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags.Continue">
            <summary>
            Set if the process should continue if possible, eg. it's a func-eval and an event occured.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags.Running">
            <summary>
            Set if the process is running
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngineMessage"/> kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Connected">
            <summary>
            The engine has connected to the debugged process. This message is the first
            message sent by the <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/>, even on failure.
            
            If the connection was successful, the program must be paused until
            <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Run"/> gets called.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Disconnected">
            <summary>
            The engine has been disconnected from the debugged process
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Break">
            <summary>
            The debugged executable is paused due to a call to <see cref="M:dnSpy.Contracts.Debugger.Engine.DbgEngine.Break"/> or
            due to some other engine event.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.EntryPointBreak">
            <summary>
            Entry point has been reached. The engine has paused the program.
            This message is only sent if the user chose to break at the entry point.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramMessage">
            <summary>
            Log message written by the debugged program. The engine has paused the program.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.Breakpoint">
            <summary>
            A breakpoint has been hit. The engine has paused the program.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.ProgramBreak">
            <summary>
            The program paused itself by executing a break instruction or method
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.SetIPComplete">
            <summary>
            SetIP() is complete
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineMessageKind.AsyncProgramMessage">
            <summary>
            Message written by the debugged program. The program is still running.
            This message is sent when a GUI app writes to the console.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineModule">
            <summary>
            A class that can update a <see cref="T:dnSpy.Contracts.Debugger.DbgModule"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.Remove(dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Removes the module and disposes of it. The engine has paused the program.
            </summary>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions">
            <summary>
            Properties to update
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.IsExe">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsExe"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Address">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Size">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.ImageLayout">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Name">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Name"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Filename">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Filename"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.IsDynamic">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.IsInMemory">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.IsOptimized">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Order">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Order"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Timestamp">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions.Version">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Version"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateIsExe(System.Boolean)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsExe"/>
            </summary>
            <param name="isExe">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateAddress(System.UInt64)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/>
            </summary>
            <param name="address">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateSize(System.UInt32)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/>
            </summary>
            <param name="size">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateImageLayout(dnSpy.Contracts.Debugger.DbgImageLayout)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout"/>
            </summary>
            <param name="imageLayout">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateName(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Name"/>
            </summary>
            <param name="name">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateFilename(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Filename"/>
            </summary>
            <param name="filename">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateIsDynamic(System.Boolean)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic"/>
            </summary>
            <param name="isDynamic">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateIsInMemory(System.Boolean)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory"/>
            </summary>
            <param name="isInMemory">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateIsOptimized(System.Nullable{System.Boolean})">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized"/>
            </summary>
            <param name="isOptimized">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOrder(System.Int32)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Order"/>
            </summary>
            <param name="order">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateTimestamp(System.Nullable{System.DateTime})">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp"/>
            </summary>
            <param name="timestamp">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateVersion(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Version"/>
            </summary>
            <param name="version">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineModule.Update(dnSpy.Contracts.Debugger.Engine.DbgEngineModule.UpdateOptions,System.Boolean,System.UInt64,System.UInt32,dnSpy.Contracts.Debugger.DbgImageLayout,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Int32,System.Nullable{System.DateTime},System.String)">
            <summary>
            Updates <see cref="T:dnSpy.Contracts.Debugger.DbgModule"/> properties
            </summary>
            <param name="options">Options</param>
            <param name="isExe">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsExe"/> value</param>
            <param name="address">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/> value</param>
            <param name="size">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/> value</param>
            <param name="imageLayout">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Name"/> value</param>
            <param name="filename">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Filename"/> value</param>
            <param name="isDynamic">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic"/> value</param>
            <param name="isInMemory">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory"/> value</param>
            <param name="isOptimized">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized"/> value</param>
            <param name="order">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Order"/> value</param>
            <param name="timestamp">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp"/> value</param>
            <param name="version">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Version"/> value</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/> instances. Use <see cref="T:dnSpy.Contracts.Debugger.Engine.ExportDbgEngineProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineProvider.Create(dnSpy.Contracts.Debugger.DbgManager,dnSpy.Contracts.Debugger.DebugProgramOptions)">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/> or returns null if <paramref name="options"/> is unsupported
            </summary>
            <param name="dbgManager">Debug manager</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.IDbgEngineProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.IDbgEngineProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Engine.ExportDbgEngineProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.ExportDbgEngineProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngineProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.ExportDbgEngineProviderAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.ExportDbgEngineProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo">
            <summary>
            Created by a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.Guid">
            <summary>
            GUID returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Guid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.RuntimeKindGuid">
            <summary>
            GUID returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.RuntimeKindGuid"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.Name">
            <summary>
            Name returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Name"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.Id">
            <summary>
            Id returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Id"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.Tags">
            <summary>
            Tags returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Tags"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineRuntimeInfo.#ctor(System.Guid,System.Guid,System.String,dnSpy.Contracts.Debugger.RuntimeId,System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="guid">GUID returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Guid"/></param>
            <param name="runtimeKindGuid">GUID returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.RuntimeKindGuid"/></param>
            <param name="name">Name returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Name"/></param>
            <param name="id">Id returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Id"/></param>
            <param name="tags">Tags returned by <see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Tags"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineThread">
            <summary>
            A class that can update a <see cref="T:dnSpy.Contracts.Debugger.DbgThread"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.Remove(dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Removes the thread and disposes of it. The engine has paused the program.
            </summary>
            <param name="messageFlags">Message flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions">
            <summary>
            Properties to update
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.None">
            <summary>
            No option is enabled
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.AppDomain">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.Kind">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Kind"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.Id">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Id"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.ManagedId">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.Name">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Name"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.SuspendedCount">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions.State">
            <summary>
            Update <see cref="P:dnSpy.Contracts.Debugger.DbgThread.State"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateAppDomain(dnSpy.Contracts.Debugger.DbgAppDomain)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain"/>
            </summary>
            <param name="appDomain">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateKind(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Kind"/>
            </summary>
            <param name="kind">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateId(System.UInt64)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Id"/>
            </summary>
            <param name="id">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateManagedId(System.Nullable{System.UInt64})">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId"/>
            </summary>
            <param name="managedId">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateName(System.String)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Name"/>
            </summary>
            <param name="name">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateSuspendedCount(System.Int32)">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount"/>
            </summary>
            <param name="suspendedCount">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateState(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.DbgStateInfo})">
            <summary>
            Updates <see cref="P:dnSpy.Contracts.Debugger.DbgThread.State"/>
            </summary>
            <param name="state">New value</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgEngineThread.Update(dnSpy.Contracts.Debugger.Engine.DbgEngineThread.UpdateOptions,dnSpy.Contracts.Debugger.DbgAppDomain,System.String,System.UInt64,System.Nullable{System.UInt64},System.String,System.Int32,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.DbgStateInfo})">
            <summary>
            Updates <see cref="T:dnSpy.Contracts.Debugger.DbgThread"/> properties
            </summary>
            <param name="options">Options</param>
            <param name="appDomain">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain"/> value</param>
            <param name="kind">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Kind"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Id"/> value</param>
            <param name="managedId">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Name"/> value</param>
            <param name="suspendedCount">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount"/> value</param>
            <param name="state">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.State"/> value</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory">
            <summary>
            Used by a <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngine"/> to create new modules, threads, etc.
            </summary>
            <remarks>
            The engines don't need to worry about locks, or raising events in the correct thread,
            or updating collections in the right thread, or closing dbg objects, etc...
            It's taken care of by dnSpy.
            </remarks>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.DbgManager">
            <summary>
            Gets the debug manager
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateAppDomain(dnSpy.Contracts.Debugger.DbgInternalAppDomain,System.String,System.Int32,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Creates an app domain. The engine has paused the program.
            </summary>
            <param name="internalAppDomain">App domain object created by the debug engine</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id"/> value</param>
            <param name="messageFlags">Message flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateAppDomain``1(dnSpy.Contracts.Debugger.DbgInternalAppDomain,System.String,System.Int32,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags,``0,System.Action{dnSpy.Contracts.Debugger.Engine.DbgEngineAppDomain})">
            <summary>
            Creates an app domain. The engine has paused the program.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="internalAppDomain">App domain object created by the debug engine</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Name"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgAppDomain.Id"/> value</param>
            <param name="messageFlags">Message flags</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.DbgAppDomain"/> or null if nothing gets added</param>
            <param name="onCreated">Called right after creating the app domain but before adding it to internal data structures. This can be null.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateModule(dnSpy.Contracts.Debugger.DbgAppDomain,dnSpy.Contracts.Debugger.DbgInternalModule,System.Boolean,System.UInt64,System.UInt32,dnSpy.Contracts.Debugger.DbgImageLayout,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Int32,System.Nullable{System.DateTime},System.String,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Creates a module. The engine has paused the program.
            </summary>
            <param name="appDomain">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.AppDomain"/> value</param>
            <param name="internalModule">Module object created by the debug engine</param>
            <param name="isExe">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsExe"/> value</param>
            <param name="address">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/> value</param>
            <param name="size">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/> value</param>
            <param name="imageLayout">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Name"/> value</param>
            <param name="filename">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Filename"/> value</param>
            <param name="isDynamic">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic"/> value</param>
            <param name="isInMemory">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory"/> value</param>
            <param name="isOptimized">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized"/> value</param>
            <param name="order">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Order"/> value</param>
            <param name="timestamp">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp"/> value</param>
            <param name="version">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Version"/> value</param>
            <param name="messageFlags">Message flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateModule``1(dnSpy.Contracts.Debugger.DbgAppDomain,dnSpy.Contracts.Debugger.DbgInternalModule,System.Boolean,System.UInt64,System.UInt32,dnSpy.Contracts.Debugger.DbgImageLayout,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Int32,System.Nullable{System.DateTime},System.String,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags,``0,System.Action{dnSpy.Contracts.Debugger.Engine.DbgEngineModule})">
            <summary>
            Creates a module. The engine has paused the program.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="appDomain">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.AppDomain"/> value</param>
            <param name="internalModule">Module object created by the debug engine</param>
            <param name="isExe">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsExe"/> value</param>
            <param name="address">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Address"/> value</param>
            <param name="size">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Size"/> value</param>
            <param name="imageLayout">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.ImageLayout"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Name"/> value</param>
            <param name="filename">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Filename"/> value</param>
            <param name="isDynamic">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsDynamic"/> value</param>
            <param name="isInMemory">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsInMemory"/> value</param>
            <param name="isOptimized">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.IsOptimized"/> value</param>
            <param name="order">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Order"/> value</param>
            <param name="timestamp">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Timestamp"/> value</param>
            <param name="version">New <see cref="P:dnSpy.Contracts.Debugger.DbgModule.Version"/> value</param>
            <param name="messageFlags">Message flags</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.DbgModule"/> or null if nothing gets added</param>
            <param name="onCreated">Called right after creating the module but before adding it to internal data structures. This can be null.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateThread(dnSpy.Contracts.Debugger.DbgAppDomain,System.String,System.UInt64,System.Nullable{System.UInt64},System.String,System.Int32,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.DbgStateInfo},dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Creates a thread. The engine has paused the program.
            </summary>
            <param name="appDomain">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain"/> value</param>
            <param name="kind">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Kind"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Id"/> value</param>
            <param name="managedId">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Name"/> value</param>
            <param name="suspendedCount">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount"/> value</param>
            <param name="state">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.State"/> value</param>
            <param name="messageFlags">Message flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateThread``1(dnSpy.Contracts.Debugger.DbgAppDomain,System.String,System.UInt64,System.Nullable{System.UInt64},System.String,System.Int32,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.DbgStateInfo},dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags,``0,System.Action{dnSpy.Contracts.Debugger.Engine.DbgEngineThread})">
            <summary>
            Creates a thread. The engine has paused the program.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="appDomain">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.AppDomain"/> value</param>
            <param name="kind">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Kind"/> value</param>
            <param name="id">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Id"/> value</param>
            <param name="managedId">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.ManagedId"/> value</param>
            <param name="name">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.Name"/> value</param>
            <param name="suspendedCount">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.SuspendedCount"/> value</param>
            <param name="state">New <see cref="P:dnSpy.Contracts.Debugger.DbgThread.State"/> value</param>
            <param name="messageFlags">Message flags</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.DbgThread"/> or null if nothing gets added</param>
            <param name="onCreated">Called right after creating the thread but before adding it to internal data structures. This can be null.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateException(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags,System.String,dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.DbgModule,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags)">
            <summary>
            Creates an exception. The engine has paused the program.
            </summary>
            <param name="id">Exception id</param>
            <param name="flags">Exception event flags</param>
            <param name="message">Exception message or null if it's not available</param>
            <param name="thread">Thread where exception was thrown or null if it's unknown</param>
            <param name="module">Module where exception was thrown or null if it's unknown</param>
            <param name="messageFlags">Message flags</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateException``1(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags,System.String,dnSpy.Contracts.Debugger.DbgThread,dnSpy.Contracts.Debugger.DbgModule,dnSpy.Contracts.Debugger.Engine.DbgEngineMessageFlags,``0,System.Action{dnSpy.Contracts.Debugger.Exceptions.DbgException})">
            <summary>
            Creates an exception. The engine has paused the program.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="id">Exception id</param>
            <param name="flags">Exception event flags</param>
            <param name="message">Exception message or null if it's not available</param>
            <param name="thread">Thread where exception was thrown or null if it's unknown</param>
            <param name="module">Module where exception was thrown or null if it's unknown</param>
            <param name="messageFlags">Message flags</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.Exceptions.DbgException"/> or null if nothing gets added</param>
            <param name="onCreated">Called right after creating the exception but before adding it to internal data structures. This can be null.</param>
            <returns></returns>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.BoundBreakpointNoAddress">
            <summary>
            Value used when the bound breakpoint's address isn't known
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Create(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.DbgModule,System.UInt64,dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage)">
            <summary>
            Creates a bound breakpoint. This method returns null if there was no breakpoint matching <paramref name="location"/>.
            
            To get notified when a bound breakpoint gets deleted, add custom data that implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="location">Breakpoint location</param>
            <param name="module">Module or null if none</param>
            <param name="address">Address or <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.BoundBreakpointNoAddress"/> if unknown</param>
            <param name="message">Warning/error message or default if none</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Create``1(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.DbgModule,System.UInt64,dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage,``0)">
            <summary>
            Creates a bound breakpoint. This method returns null if there was no breakpoint matching <paramref name="location"/>.
            
            To get notified when a bound breakpoint gets deleted, add custom data that implements <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="location">Breakpoint location</param>
            <param name="module">Module or null if none</param>
            <param name="address">Address or <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.BoundBreakpointNoAddress"/> if unknown</param>
            <param name="message">Warning/error message or default if none</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint"/> or null if nothing gets added</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.Create``1(dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo{``0}[])">
            <summary>
            Creates bound breakpoints. Locations that don't match an existing breakpoint are ignored, and all user data
            are disposed if they implement <see cref="T:System.IDisposable"/>.
            
            To get notified when a bound breakpoint gets deleted, add custom data that implements <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="infos">Bound breakpoints to create</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgObjectFactory.CreateSpecialStackFrame(System.String,dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.DbgModule,System.UInt32,System.UInt32)">
            <summary>
            Creates a special stack frame that's displayed as [name], eg. [Managed to Native Transition]
            </summary>
            <param name="name">Name, eg. "Managed to Native Transition"</param>
            <param name="location">Location or null</param>
            <param name="module">Module or null</param>
            <param name="functionOffset">Function offset</param>
            <param name="functionToken">Function token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1">
            <summary>
            Bound breakpoint info
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.NoAddress">
            <summary>
            Value used when the bound breakpoint's address isn't known
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.Location">
            <summary>
            Gets the location
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.Module">
            <summary>
            Gets the module or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.Address">
            <summary>
            Gets the address or <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.NoAddress"/> if it's not known
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.Message">
            <summary>
            Gets the warning/error message or default if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.Data">
            <summary>
            Gets the data to add to the <see cref="T:dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpoint"/> or null if nothing gets added.
            If the data implements <see cref="T:System.IDisposable"/>, it gets disposed when the bound breakpoint gets deleted.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.#ctor(dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.DbgModule,System.UInt64,dnSpy.Contracts.Debugger.Engine.DbgEngineBoundCodeBreakpointMessage,`0)">
            <summary>
            Constructor
            </summary>
            <param name="location">Location</param>
            <param name="module">Module or null if none</param>
            <param name="address">Address or <see cref="F:dnSpy.Contracts.Debugger.Engine.DbgBoundCodeBreakpointInfo`1.NoAddress"/> if it's not known</param>
            <param name="message">Warning/error message or default if none</param>
            <param name="data">Data to add to the <see cref="T:dnSpy.Contracts.Debugger.Breakpoints.Code.DbgBoundCodeBreakpoint"/> or null if nothing gets added.
            If the data implements <see cref="T:System.IDisposable"/>, it gets disposed when the bound breakpoint gets deleted.</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineExpressionEvaluator">
            <summary>
            Expression evaluator
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineExpressionEvaluator.CreateExpressionEvaluatorState">
            <summary>
            Creates evaluator state used to cache data that is needed to evaluate an expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineExpressionEvaluator.Evaluate(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions,System.Object)">
            <summary>
            Evaluates an expression
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Expression to evaluate</param>
            <param name="options">Options</param>
            <param name="state">State created by <see cref="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineExpressionEvaluator.CreateExpressionEvaluatorState"/> or null to store the state in <paramref name="evalInfo"/>'s context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineExpressionEvaluator.Assign(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions)">
            <summary>
            Assigns the value of an expression to another expression
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Target expression (lhs)</param>
            <param name="valueExpression">Source expression (rhs)</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult">
            <summary>
            Evaluation result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.Value">
            <summary>
            Gets the value or null if there was an error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.FormatSpecifiers">
            <summary>
            Gets the format specifiers, if any
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.Error">
            <summary>
            Gets the error or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.#ctor(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue,System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEvaluationResult.#ctor(System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags)">
            <summary>
            Constructor
            </summary>
            <param name="error">Error message</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEEAssignmentResult">
            <summary>
            Expression evaluator assignment result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEEAssignmentResult.Error">
            <summary>
            Error message or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEEAssignmentResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEEAssignmentResult.IsCompilerError">
            <summary>
            true if the error is from the compiler and no debuggee code was executed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineEEAssignmentResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Result flags</param>
            <param name="error">Error message or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter">
            <summary>
            Formats names, types, values, stack frames
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatExceptionName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats an exception name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Exception id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatStowedExceptionName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats a stowed exception name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Stowed exception id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatReturnValueName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats a return value name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Return value id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatObjectIdName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats an object ID name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Object id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatFrame(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a stack frame
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Stack frame options</param>
            <param name="valueOptions">Value option</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatValue(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="value">Value to format</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineFormatter.FormatType(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a value's type
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="value">Value to format</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage">
            <summary>
            Debugger language that evaluates expressions and formats values
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.Name">
            <summary>
            Gets the language name, see <see cref="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.DisplayName">
            <summary>
            Gets the language's display name (shown in the UI)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.ExpressionEvaluator">
            <summary>
            Gets the expression evaluator
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.Formatter">
            <summary>
            Gets the formatter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.LocalsProvider">
            <summary>
            Gets the locals and parameters provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.AutosProvider">
            <summary>
            Gets the autos provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.ExceptionsProvider">
            <summary>
            Gets the exceptions provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.ReturnValuesProvider">
            <summary>
            Gets the return values provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.TypeVariablesProvider">
            <summary>
            Gets the type variables provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.ValueNodeFactory">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/> factory
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage.InitializeContext(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Code.DbgCodeLocation,System.Threading.CancellationToken)">
            <summary>
            Initializes an evaluation context
            </summary>
            <param name="context">Context</param>
            <param name="location">Location or null</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguageProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguage"/>s. Use <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguageProvider.RuntimeDisplayName">
            <summary>
            Gets the runtime display name, eg. ".NET"
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguageProvider.Create">
            <summary>
            Creates all languages
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineLanguageProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineLanguageProviderMetadata.RuntimeKindGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute.RuntimeKindGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineLanguageProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLanguageProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute.#ctor(System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="runtimeKindGuid">Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute.RuntimeKindGuid">
            <summary>
            Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineLanguageProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId">
            <summary>
            References a value in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId.Id">
            <summary>
            Gets the unique id in the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId.GetValue(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo)">
            <summary>
            Creates a new value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId"/>s.
            Use <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory.CanCreateObjectId(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue)">
            <summary>
            Returns true if it's possible to create an object id
            </summary>
            <param name="value">Value created by this runtime</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory.CreateObjectId(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue,System.UInt32)">
            <summary>
            Creates an object id or returns null
            </summary>
            <param name="value">Value created by this runtime</param>
            <param name="id">Unique id</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory.Equals(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId,dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue)">
            <summary>
            Checks if an object id and a value refer to the same data
            </summary>
            <param name="objectId">Object id created by this class</param>
            <param name="value">Value created by this runtime</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory.GetHashCode(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId)">
            <summary>
            Gets the hash code of an object id
            </summary>
            <param name="objectId">Object id created by this class</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory.GetHashCode(dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue)">
            <summary>
            Gets the hash code of a value created by this runtime
            </summary>
            <param name="value">Value created by this runtime</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineObjectIdFactoryMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineObjectIdFactoryMetadata.RuntimeGuid">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute.RuntimeGuid"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.IDbgEngineObjectIdFactoryMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectIdFactory"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute.#ctor(System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="runtimeGuid">Runtime GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/></param>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute.RuntimeGuid">
            <summary>
            Runtime GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.ExportDbgEngineObjectIdFactoryAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue">
            <summary>
            Result of evaluating an expression
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.InternalValue">
            <summary>
            Gets the value object created by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.ValueType">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.HasRawValue">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.RawValue"/> is valid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.RawValue">
            <summary>
            The value. It's only valid if <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.HasRawValue"/> is true. A null value is a valid value.
            If it's an enum value, it's stored as the enum's underlying type (eg. <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValue.GetRawAddressValue(System.Boolean)">
            <summary>
            Gets the address of the value or null if there's no address available.
            The returned address gets invalid when the runtime continues.
            </summary>
            <param name="onlyDataAddress">If true and if it's a supported type (eg. a simple type such as integers,
            floating point values, strings or byte arrays) the returned object contains the address of the actual
            value, else the returned address and length covers the whole object including vtable, method table or other
            special data.</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode">
            <summary>
            A value shown in a treeview (eg. in locals window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.ErrorMessage">
            <summary>
            Gets the error message or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.Value">
            <summary>
            Gets the value or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.Expression">
            <summary>
            Gets the expression that is used when adding an expression to the watch window or
            when assigning a new value to the source.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.ImageName">
            <summary>
            Image name, see <see cref="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgValueNodeImageNames"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.IsReadOnly">
            <summary>
            true if this is a read-only value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.CausesSideEffects">
            <summary>
            true if the expression causes side effects
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.HasChildren">
            <summary>
            Returns true if it has children, false if it has no children and null if it's unknown (eg. it's too expensive to calculate it now).
            UI code can use this property to decide if it shows the treeview node expander ("|>").
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.GetChildCount(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo)">
            <summary>
            Number of children. This method is called as late as possible and can be lazily initialized.
            It's assumed to be 0 if <see cref="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.HasChildren"/> is false.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.GetChildren(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.UInt64,System.Int32,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Creates new children
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="index">Index of first child</param>
            <param name="count">Max number of children to return</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.Format(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters,System.Globalization.CultureInfo)">
            <summary>
            Formats the name, value, and type
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode.Assign(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions)">
            <summary>
            Writes a new value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Source expression (rhs)</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeAssignmentResult">
            <summary>
            Assignment result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeAssignmentResult.Error">
            <summary>
            Gets the error message (also see <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages"/>) or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeAssignmentResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeAssignmentResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Result flags</param>
            <param name="error">Error message or one of the errors in <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/>s
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeFactory.Create(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo[])">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/>s
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expressions">Expressions to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeFactory.Create(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineObjectId[],dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/>s
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="objectIds">Object ids</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/>s for the variables windows
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNodeProvider.GetNodes(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Gets all values
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode"/>s for the locals windows
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeProvider.GetNodes(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions,dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions)">
            <summary>
            Gets all values
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <param name="localsOptions">Locals value node provider options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeInfo">
            <summary>
            Contains a value node and its kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeInfo.Kind">
            <summary>
            What kind of value this is (local or parameter)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeInfo.ValueNode">
            <summary>
            Gets the node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineLocalsValueNodeInfo.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind,dnSpy.Contracts.Debugger.Engine.Evaluation.DbgEngineValueNode)">
            <summary>
            Constructor
            </summary>
            <param name="kind">What kind of value this is (local or parameter)</param>
            <param name="valueNode">Value node</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages">
            <summary>
            Common error messages
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.InternalDebuggerError">
            <summary>
            Some error
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.ExpressionCausesSideEffects">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoSideEffects"/> is set but expression causes side effects
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.FuncEvalDisabled">
            <summary>
            <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.NoFuncEval"/> or <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoFuncEval"/>
            is set but code must call a method
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.FuncEvalTimedOut">
            <summary>
            Function evaluation timed out
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.FuncEvalTimedOutNowDisabled">
            <summary>
            Function evaluation timed out previously and is disabled until the user continues the debugged program
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.CanFuncEvalOnlyWhenPaused">
            <summary>
            The debugged program isn't paused so it's not possible to func-eval
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.CantFuncEvalWhenUnhandledExceptionHasOccurred">
            <summary>
            It's not possible to func-eval when an unhandled exception has occurred
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.CantFuncEval">
            <summary>
            It's not possible to func-eval, eg. because we're already func-eval'ing
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.CantFuncEvaluateWhenThreadIsAtUnsafePoint">
            <summary>
            It's not possible to func-eval because the thread isn't at a safe point where a GC can occur
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.FuncEvalRequiresAllThreadsToRun">
            <summary>
            Can't func eval since all threads must execute (the code called <see cref="M:System.Diagnostics.Debugger.NotifyOfCrossThreadDependency"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.CannotReadLocalOrArgumentMaybeOptimizedAway">
            <summary>
            Can't read local or argument because it's not available at the current IP or it's been optimized away
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages.RuntimeIsUnableToEvaluateExpression">
            <summary>
            Runtime can't read a field, local
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Evaluation.Internal.IPredefinedEvaluationErrorMessagesHelper">
            <summary>
            Converts <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages"/> values to localized strings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Evaluation.Internal.IPredefinedEvaluationErrorMessagesHelper.GetErrorMessage(System.String)">
            <summary>
            Gets a message
            </summary>
            <param name="error">An error message (eg. one in <see cref="T:dnSpy.Contracts.Debugger.Engine.Evaluation.PredefinedEvaluationErrorMessages"/>)</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind">
            <summary>
            Step kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind.StepInto">
            <summary>
            Step into
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind.StepOver">
            <summary>
            Step over
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind.StepOut">
            <summary>
            Step out
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper">
            <summary>
            Steps into, over or out of a method. When closed, any non-completed <see cref="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.Step(System.Object,dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind)"/> call must be canceled.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.StepComplete">
            <summary>
            Raised when the step is complete
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.Step(System.Object,dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind)">
            <summary>
            Steps once. This method can be called again once <see cref="E:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.StepComplete"/> is raised.
            This method is only called if the engine is paused.
            </summary>
            <param name="tag">This value must be used when raising <see cref="E:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.StepComplete"/></param>
            <param name="step">Step kind</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.Cancel(System.Object)">
            <summary>
            Cancels the step, but does not raise <see cref="E:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.StepComplete"/>
            </summary>
            <param name="tag">Same value that was passed to <see cref="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.Step(System.Object,dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind)"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs">
            <summary>
            Step complete event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs.Thread">
            <summary>
            Gets the thread or null to use the default thread that was used to create the stepper
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs.Tag">
            <summary>
            Gets the tag
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs.Error">
            <summary>
            Gets the error message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs.ForciblyCanceled">
            <summary>
            true if the stepper was canceled by the engine
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepCompleteEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.Object,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread or null to use the default thread that was used to create the stepper</param>
            <param name="tag">Same value that was passed to <see cref="M:dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepper.Step(System.Object,dnSpy.Contracts.Debugger.Engine.Steppers.DbgEngineStepKind)"/></param>
            <param name="error">Error message or null if none</param>
            <param name="forciblyCanceled">true if the stepper was canceled by the engine</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext">
            <summary>
            Evaluation context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.ContinueContext">
            <summary>
            This object gets closed (and recreated) when the process continues
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.FuncEvalTimeout">
            <summary>
            Func-eval timeout (func-eval = calling functions in debugged process)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.Options">
            <summary>
            Context options
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext.Close">
            <summary>
            Closes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo">
            <summary>
            Contains the classes needed to func-eval
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Context">
            <summary>
            Gets the evaluation context
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Frame">
            <summary>
            Gets the stack frame
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.CancellationToken">
            <summary>
            Gets the cancellation token
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.CallStack.DbgStackFrame,System.Threading.CancellationToken)">
            <summary>
            Constructor
            </summary>
            <param name="context">Evaluation context</param>
            <param name="frame">Stack frame</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Close">
            <summary>
            Closes <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Frame"/> and <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo.Context"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo">
            <summary>
            Contains the expression to evaluate and options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo.Expression">
            <summary>
            Gets the expression to evaluate
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo.NodeOptions">
            <summary>
            Gets the value node options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo.Options">
            <summary>
            Gets the evaluation options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo.ExpressionEvaluatorState">
            <summary>
            Expression evaluator state or null, see <see cref="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.CreateExpressionEvaluatorState"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo.#ctor(System.String,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression to evaluate</param>
            <param name="nodeOptions">Value node options</param>
            <param name="options">Evaluation options</param>
            <param name="expressionEvaluatorState">Expression evaluator state or null, see <see cref="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.CreateExpressionEvaluatorState"/></param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator">
            <summary>
            Expression evaluator
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.CreateExpressionEvaluatorState">
            <summary>
            Creates evaluator state used to cache data that is needed to evaluate an expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.Evaluate(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions,System.Object)">
            <summary>
            Evaluates an expression. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValue"/> is automatically closed when its runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Expression to evaluate</param>
            <param name="options">Options</param>
            <param name="state">State created by <see cref="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.CreateExpressionEvaluatorState"/> or null to store the state in <paramref name="evalInfo"/>'s context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.Assign(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions)">
            <summary>
            Assigns the value of an expression to another expression
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Target expression (lhs)</param>
            <param name="valueExpression">Source expression (rhs)</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions">
            <summary>
            Evaluation options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.Expression">
            <summary>
            Set if it's an expression, false if it's a statement
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoSideEffects">
            <summary>
            Fail if the expression causes side effects, eg. method calls
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoFuncEval">
            <summary>
            Don't allow function evaluations (calling code in debugged process)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoName">
            <summary>
            Don't create a name/expression (only used by value nodes)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.RawLocals">
            <summary>
            Use only the locals that exist in the metadata. Don't show captured variables, show their display class variables instead
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags">
            <summary>
            Evaluation result flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags.SideEffects">
            <summary>
            The expression causes side effects
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags.ReadOnly">
            <summary>
            The result is read-only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags.BooleanExpression">
            <summary>
            It's a boolean expression
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags.ThrownException">
            <summary>
            The value is a thrown exception
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult">
            <summary>
            Evaluation result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.Value">
            <summary>
            Gets the value or null if there was an error
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.FormatSpecifiers">
            <summary>
            Gets the format specifiers
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.IsThrownException">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.Value"/> is a thrown exception
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.Error">
            <summary>
            Gets the error or null if none
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgValue,System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResult.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationResultFlags)">
            <summary>
            Constructor
            </summary>
            <param name="error">Error message</param>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags">
            <summary>
            Assignment result flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags.CompilerError">
            <summary>
            The error is from the compiler and no debuggee code was executed
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags.ExecutedCode">
            <summary>
            Code in the debuggee was executed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResult">
            <summary>
            Expression evaluator assignment result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResult.Error">
            <summary>
            Error message or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResult.IsCompilerError">
            <summary>
            true if the error is from the compiler and no debuggee code was executed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Result flags</param>
            <param name="error">Error message or null</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter">
            <summary>
            Formats names, frames, values and types
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatExceptionName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats an exception name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Exception id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatStowedExceptionName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats a stowed exception name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Stowed exception id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatReturnValueName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats a return value name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Return value id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatObjectIdName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContext,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,System.UInt32)">
            <summary>
            Formats an object ID name
            </summary>
            <param name="context">Evaluation context</param>
            <param name="output">Output</param>
            <param name="id">Object id</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatFrame(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a stack frame
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Stack frame options</param>
            <param name="valueOptions">Value option</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatValue(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValue,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="value">Value to format</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgFormatter.FormatType(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValue,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats a value's type
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="value">Value to format</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage">
            <summary>
            Debugger language that evaluates expressions and formats values
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.RuntimeKindGuid">
            <summary>
            Gets the runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.Name">
            <summary>
            Gets the language name, see <see cref="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.DisplayName">
            <summary>
            Gets the language's display name (shown in the UI)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.ExpressionEvaluator">
            <summary>
            Gets the expression evaluator
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.Formatter">
            <summary>
            Gets the formatter
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.LocalsProvider">
            <summary>
            Gets the locals and parameters provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.AutosProvider">
            <summary>
            Gets the autos provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.ExceptionsProvider">
            <summary>
            Gets the exceptions provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.ReturnValuesProvider">
            <summary>
            Gets the return values provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.TypeVariablesProvider">
            <summary>
            Gets the type variables provider
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.ValueNodeFactory">
            <summary>
            Gets the <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/> factory
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.DefaultFuncEvalTimeout">
            <summary>
            Default func-eval timeout value
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.CreateContext(dnSpy.Contracts.Debugger.DbgRuntime,dnSpy.Contracts.Debugger.Code.DbgCodeLocation,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates an evaluation context
            </summary>
            <param name="runtime">Runtime</param>
            <param name="location">Location or null</param>
            <param name="options">Options</param>
            <param name="funcEvalTimeout">Func-eval timeout (func-eval = calling functions in the debugged process) or default instance to use default timeout value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguage.CreateContext(dnSpy.Contracts.Debugger.CallStack.DbgStackFrame,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates an evaluation context
            </summary>
            <param name="frame">Stack frame</param>
            <param name="options">Options</param>
            <param name="funcEvalTimeout">Func-eval timeout (func-eval = calling functions in the debugged process) or default instance to use default timeout value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions">
            <summary>
            Evaluation context options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions.RunAllThreads">
            <summary>
            Set if all threads should run when func-evaluating (calling code in the debugged process),
            or cleared if only one thread should run. Usually only one thread is run, but that can
            lead to a deadlock if the thread calls a suspended thread or if it tries to acquire a
            lock owned by a suspended thread.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationContextOptions.NoMethodBody">
            <summary>
            If method body info isn't needed, this option should be used. It prevents decompiling the
            method to get sequence points and other debug info. Can be used when formatting stack frames.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageService">
            <summary>
            Debugger language service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageService.GetLanguages(System.Guid)">
            <summary>
            Gets all languages
            </summary>
            <param name="runtimeKindGuid">Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageService.SetCurrentLanguage(System.Guid,dnSpy.Contracts.Debugger.Evaluation.DbgLanguage)">
            <summary>
            Sets the language that should be used by all runtimes with GUID <paramref name="runtimeKindGuid"/>
            </summary>
            <param name="runtimeKindGuid">Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <param name="language">Language to use</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageService.GetCurrentLanguage(System.Guid)">
            <summary>
            Gets the current language the runtime uses
            </summary>
            <param name="runtimeKindGuid">Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <returns></returns>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageService.LanguageChanged">
            <summary>
            Raised when a runtime's current language is changed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageChangedEventArgs">
            <summary>
            Language changed event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageChangedEventArgs.RuntimeKindGuid">
            <summary>
            Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageChangedEventArgs.Language">
            <summary>
            New language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLanguageChangedEventArgs.#ctor(System.Guid,dnSpy.Contracts.Debugger.Evaluation.DbgLanguage)">
            <summary>
            Constructor
            </summary>
            <param name="runtimeKindGuid">Runtime kind GUID, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids"/></param>
            <param name="language">New language</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId">
            <summary>
            References a value in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId.Id">
            <summary>
            Gets the unique id in the runtime
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId.GetValue(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo)">
            <summary>
            Creates a new value. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValue"/> is automatically closed when its runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId.Remove">
            <summary>
            Removes and closes the object id
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId"/>s
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.ObjectIdsChanged">
            <summary>
            Raised when one or more non-hidden <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgObjectId"/>s are created or removed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.CanCreateObjectId(dnSpy.Contracts.Debugger.Evaluation.DbgValue,dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions)">
            <summary>
            Returns true if it's possible to create an object id
            </summary>
            <param name="value">Value</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.CreateObjectId(dnSpy.Contracts.Debugger.Evaluation.DbgValue,dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions)">
            <summary>
            Creates an object id or returns null
            </summary>
            <param name="value">Value</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.CreateObjectIds(dnSpy.Contracts.Debugger.Evaluation.DbgValue[],dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions)">
            <summary>
            Creates object ids. The returned array will contain null elements if it wasn't possible to create object ids
            </summary>
            <param name="values">Values</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.GetObjectId(dnSpy.Contracts.Debugger.Evaluation.DbgValue)">
            <summary>
            Returns an non-hidden object id or null if there's none that references <paramref name="value"/>
            </summary>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.GetObjectId(dnSpy.Contracts.Debugger.DbgRuntime,System.UInt32)">
            <summary>
            Returns a non-hidden object id or null if there's none
            </summary>
            <param name="runtime">Runtime</param>
            <param name="id">Object id</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.GetObjectIds(dnSpy.Contracts.Debugger.DbgRuntime)">
            <summary>
            Gets all non-hidden object ids
            </summary>
            <param name="runtime">Runtime</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.Remove(dnSpy.Contracts.Debugger.Evaluation.DbgObjectId)">
            <summary>
            Removes and closes an object id
            </summary>
            <param name="objectId">Object id to remove and close</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.Remove(System.Collections.Generic.IEnumerable{dnSpy.Contracts.Debugger.Evaluation.DbgObjectId})">
            <summary>
            Removes and closes object ids
            </summary>
            <param name="objectIds">Object ids to remove and close</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.Equals(dnSpy.Contracts.Debugger.Evaluation.DbgObjectId,dnSpy.Contracts.Debugger.Evaluation.DbgValue)">
            <summary>
            Checks if an object id and a value refer to the same data
            </summary>
            <param name="objectId">Object id</param>
            <param name="value">Value</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgObjectIdService.GetHashCode(dnSpy.Contracts.Debugger.Evaluation.DbgObjectId)">
            <summary>
            Gets the hash code of an object id
            </summary>
            <param name="objectId">Object id</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions">
            <summary>
            Object ID options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.CreateObjectIdOptions.Hidden">
            <summary>
            Hidden object Id. It's not shown in any of the variables windows.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions">
            <summary>
            Stack frame formatter options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.ModuleNames">
            <summary>
            Show module name, eg. <c>module.dll!func</c>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.ParameterTypes">
            <summary>
            Show parameter types
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.ParameterNames">
            <summary>
            Show parameter names
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.ParameterValues">
            <summary>
            Show parameter values
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.DeclaringTypes">
            <summary>
            Show declaring type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.ReturnTypes">
            <summary>
            Show return type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.Namespaces">
            <summary>
            Show namespace
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.IntrinsicTypeKeywords">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.Decimal">
            <summary>
            Set if integers are shown in decimal, clear if integers are shown in hexadecimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.Tokens">
            <summary>
            Show tokens
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.IP">
            <summary>
            Show instruction pointer
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.DigitSeparators">
            <summary>
            Use digit separators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgStackFrameFormatterOptions.FullString">
            <summary>
            Show the full string value even if it's a very long string
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValue">
            <summary>
            Result of evaluating an expression
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.InternalValue">
            <summary>
            Gets the value object created by the debug engine
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.ValueType">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.HasRawValue">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is valid
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue">
            <summary>
            The value. It's only valid if <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.HasRawValue"/> is true. A null value is a valid value.
            If it's an enum value, it's stored as the enum's underlying type (eg. <see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValue.GetRawAddressValue(System.Boolean)">
            <summary>
            Gets the address of the value or null if there's no address available.
            The returned address gets invalid when the runtime continues.
            </summary>
            <param name="onlyDataAddress">If true and if it's a supported type (eg. a simple type such as integers,
            floating point values, strings or byte arrays) the returned object contains the address of the actual
            value, else the returned address and length covers the whole object including vtable, method table or other
            special data.</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValue.Close">
            <summary>
            Closes this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType">
            <summary>
            Type of value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Other">
            <summary>
            Some other type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Void">
            <summary>
            There's no value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Boolean">
            <summary>
            Boolean, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Char1">
            <summary>
            1-byte char, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.CharUtf16">
            <summary>
            Char, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Int8">
            <summary>
            8-bit signed int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.SByte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Int16">
            <summary>
            16-bit signed int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Int32">
            <summary>
            32-bit signed int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Int64">
            <summary>
            64-bit signed int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.UInt8">
            <summary>
            8-bit unsigned int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.UInt16">
            <summary>
            16-bit unsigned int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.UInt16"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.UInt32">
            <summary>
            32-bit unsigned int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.UInt64">
            <summary>
            64-bit unsigned int, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Float32">
            <summary>
            32-bit floating point number, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Float64">
            <summary>
            64-bit floating point number, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Decimal">
            <summary>
            Decimal, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Ptr32">
            <summary>
            32-bit pointer, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.Ptr64">
            <summary>
            64-bit pointer, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.UInt64"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.StringUtf16">
            <summary>
            UTF-16 string, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a <see cref="T:System.String"/> or null
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgSimpleValueType.DateTime">
            <summary>
            A <see cref="T:System.DateTime"/>, <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValue.RawValue"/> is a boxed <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgRawAddressValue">
            <summary>
            Contains the address and length of a value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgRawAddressValue.Address">
            <summary>
            Gets the address
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgRawAddressValue.Length">
            <summary>
            Gets the length
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgRawAddressValue.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor
            </summary>
            <param name="address">Address</param>
            <param name="length">Length</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions">
            <summary>
            Value formatter options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Edit">
            <summary>
            Set if it should be formatted so it can be edited
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Decimal">
            <summary>
            Set if integers are shown in decimal, clear if integers are shown in hexadecimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.FuncEval">
            <summary>
            Set to allow function evaluations (calling methods in the debugged process)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.ToString">
            <summary>
            Set to allow calling methods to get a string representation of the value. <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.FuncEval"/> must also be set.
            If it's a simple type (eg. an integer), it's formatted without calling any methods in the debugged process and
            this flag is ignored.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.DigitSeparators">
            <summary>
            Use digit separators. This flag is ignored if <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Edit"/> is set and the language doesn't support digit separators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.NoStringQuotes">
            <summary>
            Don't show string quotes, just the raw string value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.NoDebuggerDisplay">
            <summary>
            Don't use debugger display attributes
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.FullString">
            <summary>
            Show the full string value even if it's a very long string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Namespaces">
            <summary>
            Show namespaces. Only used if <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Edit"/> is clear
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.IntrinsicTypeKeywords">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Tokens">
            <summary>
            Show tokens. Only used if <see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions.Edit"/> is clear
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions">
            <summary>
            Type formatter options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.Decimal">
            <summary>
            Set if integers are shown in decimal, clear if integers are shown in hexadecimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.DigitSeparators">
            <summary>
            Use digit separators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.Namespaces">
            <summary>
            Show namespaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.IntrinsicTypeKeywords">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions.Tokens">
            <summary>
            Show tokens
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode">
            <summary>
            A value shown in a treeview (eg. in locals window)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.HasError">
            <summary>
            true if this is an error value node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.ErrorMessage">
            <summary>
            Gets the error message or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.HasValue">
            <summary>
            true if <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Value"/> is not null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Value">
            <summary>
            Gets the value or null if there's none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.CanEvaluateExpression">
            <summary>
            true if it's a node that has an <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Expression"/> can be evaluated, false if it's a non-value node, eg. 'Type variables', 'Raw View', etc.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Expression">
            <summary>
            Gets the expression that is used when adding an expression to the watch window or
            when assigning a new value to the source. See also <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.CanEvaluateExpression"/>.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.ImageName">
            <summary>
            Image name, see <see cref="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgValueNodeImageNames"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.IsReadOnly">
            <summary>
            true if this is a read-only value
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.CausesSideEffects">
            <summary>
            true if the expression causes side effects
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.HasChildren">
            <summary>
            Returns true if it has children, false if it has no children and null if it's unknown (eg. it's too expensive to calculate it now).
            UI code can use this property to decide if it shows the treeview node expander ("|>").
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.GetChildCount(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo)">
            <summary>
            Number of children. This property is called as late as possible and can be lazily initialized.
            It's assumed to be 0 if <see cref="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.HasChildren"/> is false.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.GetChildren(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.UInt64,System.Int32,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Creates new children. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s are automatically closed when their runtime continues
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="index">Index of first child</param>
            <param name="count">Max number of children to return</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.FormatName(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats the name
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Formatter options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.FormatValue(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats the value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Formatter options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.FormatExpectedType(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats the expected type ("field" type)
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Formatter options</param>
            <param name="valueOptions">Value options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.FormatActualType(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions,dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions,System.Globalization.CultureInfo)">
            <summary>
            Formats the actual type (value type)
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="output">Output</param>
            <param name="options">Formatter options</param>
            <param name="valueOptions">Value options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Format(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters,System.Globalization.CultureInfo)">
            <summary>
            Formats the name, value, and type
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <param name="cultureInfo">Culture or null to use invariant culture</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode.Assign(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions)">
            <summary>
            Writes a new value
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Source expression (rhs)</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeAssignmentResult">
            <summary>
            Assignment result
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeAssignmentResult.Error">
            <summary>
            Gets the error message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeAssignmentResult.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeAssignmentResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgEEAssignmentResultFlags,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Result flags</param>
            <param name="error">Error message or null if none</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters">
            <summary>
            Parameters when formatting a <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.NameOutput">
            <summary>
            Used when writing the name or null if it's not written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ValueOutput">
            <summary>
            Used when writing the value or null if it's not written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ExpectedTypeOutput">
            <summary>
            Used when writing the expected type ("field" type) or null if it's not written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ActualTypeOutput">
            <summary>
            Used when writing the actual type (value type) or null if it's not written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.NameFormatterOptions">
            <summary>
            Name formatter options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ValueFormatterOptions">
            <summary>
            Value formatter options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.TypeFormatterOptions">
            <summary>
            Type formatter options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ExpectedTypeFormatterOptions">
            <summary>
            Expected type formatter options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.IDbgValueNodeFormatParameters.ActualTypeFormatterOptions">
            <summary>
            Actual type formatter options
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/> evaluation options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.NoFuncEval">
            <summary>
            Don't allow function evaluations (calling code in debugged process)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.ResultsView">
            <summary>
            Show the Results View only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.DynamicView">
            <summary>
            Show the Dynamic View only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.RawView">
            <summary>
            Show the raw view (don't use debugger type proxies)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.HideCompilerGeneratedMembers">
            <summary>
            Hide compiler generated members in variables windows (respect debugger attributes, eg. <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.RespectHideMemberAttributes">
            <summary>
            Respect attributes that can hide a member, eg. <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute"/> and <see cref="F:System.Diagnostics.DebuggerBrowsableState.Never"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.PublicMembers">
            <summary>
            Only show public members
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.NoHideRoots">
            <summary>
            Roots can't be hidden
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions.HideDeprecatedError">
            <summary>
            Hide deprecated members
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeFactory">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeFactory.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeFactory.Create(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,System.String,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions,dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions,System.Object)">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expression">Expression</param>
            <param name="nodeOptions">Value node options</param>
            <param name="options">Eval options</param>
            <param name="expressionEvaluatorState">State created by <see cref="M:dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluator.CreateExpressionEvaluatorState"/> or null to store the state in <paramref name="evalInfo"/>'s context</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeFactory.Create(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgExpressionEvaluationInfo[])">
            <summary>
            Creates a <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s are automatically closed when their runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="expressions">Expressions to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeFactory.Create(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgObjectId[],dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s are automatically closed when their runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="objectIds">Object ids</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgCreateValueNodeResult">
            <summary>
            Contains the created <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/> or an error message
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgCreateValueNodeResult.ValueNode">
            <summary>
            Gets the created node
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgCreateValueNodeResult.CausesSideEffects">
            <summary>
            true if the expression wasn't evaluated because it causes side effects (<see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoSideEffects"/> was used)
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgCreateValueNodeResult.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgValueNode,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="node">New value node</param>
            <param name="causesSideEffects">true if the expression wasn't evaluated because it causes side effects (<see cref="F:dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationOptions.NoSideEffects"/> was used)</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s for the variables windows
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeProvider.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeProvider.GetNodes(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Gets all values. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s are automatically closed when their runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions">
            <summary>
            Locals value node provider options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions.ShowCompilerGeneratedVariables">
            <summary>
            Show compiler generated variables (<see cref="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowCompilerGeneratedVariables"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions.ShowDecompilerGeneratedVariables">
            <summary>
            Show decompiler generated variables (<see cref="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowDecompilerGeneratedVariables"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions.ShowRawLocals">
            <summary>
            Show raw locals (<see cref="P:dnSpy.Contracts.Debugger.DebuggerSettings.ShowRawLocals"/>)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeProvider">
            <summary>
            Provides <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s for the locals window
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeProvider.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeProvider.GetNodes(dnSpy.Contracts.Debugger.Evaluation.DbgEvaluationInfo,dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions,dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeEvaluationOptions)">
            <summary>
            Gets all values. The returned <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>s are automatically closed when their runtime continues.
            </summary>
            <param name="evalInfo">Evaluation info</param>
            <param name="options">Options</param>
            <param name="localsOptions">Locals value node provider options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind">
            <summary>
            Value node kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind.Unknown">
            <summary>
            Unknown value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind.Parameter">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind.Local">
            <summary>
            Local value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind.Error">
            <summary>
            Error value
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeInfo">
            <summary>
            Contains a value node and its kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeInfo.Kind">
            <summary>
            What kind of value this is (local or parameter)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeInfo.ValueNode">
            <summary>
            Gets the node
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeInfo.#ctor(dnSpy.Contracts.Debugger.Evaluation.DbgLocalsValueNodeKind,dnSpy.Contracts.Debugger.Evaluation.DbgValueNode)">
            <summary>
            Constructor
            </summary>
            <param name="kind">What kind of value this is (local or parameter)</param>
            <param name="valueNode">Value node</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames">
            <summary>
            Predefined language names. These aren't language display names, they're just unique language names.
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames.None">
            <summary>
            No language is available
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgLanguageNames.VisualBasic">
            <summary>
            Visual Basic
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedDbgValueNodeImageNames">
            <summary>
            Image names returned by <see cref="T:dnSpy.Contracts.Debugger.Evaluation.DbgValueNode"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers">
            <summary>
            Format specifiers used by variables windows
            
            https://docs.microsoft.com/en-us/visualstudio/debugger/format-specifiers-in-csharp
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Decimal">
            <summary>
            Use decimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Hexadecimal">
            <summary>
            Use hexadecimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoQuotes">
            <summary>
            No quotes, just show the raw string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.RawView">
            <summary>
            Raw view only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.ResultsView">
            <summary>
            Results view only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.DynamicView">
            <summary>
            Dynamic view only
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.ShowAllMembers">
            <summary>
            Show all members, even non-public ones
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Emulator">
            <summary>
            Emulate the code without real func-eval
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoSideEffects">
            <summary>
            No side effects, it implies <see cref="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Emulator"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.AllowFuncEval">
            <summary>
            Allow func-eval even if <see cref="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoSideEffects"/> is used and expression causes side effects
            (ac = always calculate)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.DigitSeparators">
            <summary>
            Digit separators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoDigitSeparators">
            <summary>
            No digit seaparators
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.EditExpression">
            <summary>
            Use the same expression that's shown in the edit text box
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.ToString">
            <summary>
            Use ToString() if available to format the value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoToString">
            <summary>
            Don't use ToString() to format the value
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.DebuggerDisplay">
            <summary>
            Use <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> if available
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoDebuggerDisplay">
            <summary>
            Don't use <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.FullString">
            <summary>
            Show the full string value even if it's a very long string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoFullString">
            <summary>
            Don't show the full string value if it's a very long string
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Namespaces">
            <summary>
            Show namespaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoNamespaces">
            <summary>
            Don't show namespaces
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Intrinsics">
            <summary>
            Show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoIntrinsics">
            <summary>
            Don't show intrinsic type keywords (eg. int instead of Int32)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.Tokens">
            <summary>
            Show tokens
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoTokens">
            <summary>
            Don't show tokens
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.ShowCompilerGeneratedMembers">
            <summary>
            Show compiler generated members
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoShowCompilerGeneratedMembers">
            <summary>
            Don't show compiler generated members
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.RespectHideMemberAttributes">
            <summary>
            Respect attributes that can hide a member, eg. <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute"/> and <see cref="F:System.Diagnostics.DebuggerBrowsableState.Never"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.NoRespectHideMemberAttributes">
            <summary>
            Don't respect attributes that can hide a member, eg. <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute"/> and <see cref="F:System.Diagnostics.DebuggerBrowsableState.Never"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.GetValueFormatterOptions(System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterOptions)">
            <summary>
            Gets value formatter options
            </summary>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="options">Default options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.GetValueFormatterTypeOptions(System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgValueFormatterTypeOptions)">
            <summary>
            Gets value formatter type options
            </summary>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="options">Default options</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Evaluation.PredefinedFormatSpecifiers.GetValueNodeEvaluationOptions(System.Collections.ObjectModel.ReadOnlyCollection{System.String},dnSpy.Contracts.Debugger.Evaluation.DbgValueNodeEvaluationOptions)">
            <summary>
            Gets value node evaluation options
            </summary>
            <param name="formatSpecifiers">Format specifiers or null</param>
            <param name="options">Default options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgException">
            <summary>
            Thrown exception in the debugged process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Id">
            <summary>
            Gets the exception id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Flags">
            <summary>
            Gets the exception event flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.IsFirstChance">
            <summary>
            true if it's a first chance exception
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.IsSecondChance">
            <summary>
            true if it's a second chance exception
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.IsUnhandled">
            <summary>
            true if it's an unhandled exception. The program will be terminated if it tries to run again.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Message">
            <summary>
            Exception message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Thread">
            <summary>
            Thread where exception was thrown or null if it's not known
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgException.Module">
            <summary>
            Module where exception was thrown or null if it's not known
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition">
            <summary>
            Exception category definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name">
            <summary>
            Name, see also <see cref="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.DisplayName">
            <summary>
            Localized name shown in the UI
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.ShortDisplayName">
            <summary>
            Shorter localized name shown in the UI
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
            <param name="name">Name, see also <see cref="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories"/></param>
            <param name="displayName">Localized name shown in the UI</param>
            <param name="shortDisplayName">Shorter localized name shown in the UI</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.ToString">
            <summary>
            Returns <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.DisplayName"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags">
            <summary>
            Exception category flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags.Code">
            <summary>
            Exceptions are integer codes instead of strings
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags.DecimalCode">
            <summary>
            Exception code should be displayed in decimal and not in hexadecimal
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinitionFlags.UnsignedCode">
            <summary>
            Exception code is an unsigned integer
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings">
            <summary>
            Exception condition settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings.ConditionType">
            <summary>
            Exception condition type
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings.Condition">
            <summary>
            Exception condition
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="conditionType">Condition type</param>
            <param name="condition">Condition</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionType">
            <summary>
            Exception condition type
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionType.ModuleNameEquals">
            <summary>
            Module name equals <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings.Condition"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionType.ModuleNameNotEquals">
            <summary>
            Module name does not equal <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings.Condition"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition">
            <summary>
            Exception definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.Id">
            <summary>
            Exception ID
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.Description">
            <summary>
            Description shown in the UI or null
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags)">
            <summary>
            Constructor
            </summary>
            <param name="id">Exception id</param>
            <param name="flags">Flags</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">Exception id</param>
            <param name="flags">Flags</param>
            <param name="description">Description shown in the UI or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags">
            <summary>
            Exception definition flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags.StopFirstChance">
            <summary>
            Stop at first firing of exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags.StopSecondChance">
            <summary>
            Stop at second firing of exception
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionProvider">
            <summary>
            Provides exception category definitions and exception definitions. Use <see cref="T:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionDefinitionProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionProvider.GetExceptionFilenames">
            <summary>
            Gets exception files (*.ex.xml) that define exceptions and exception categories. If a relative filename
            is returned, it's relative to the assembly of the called type.
            There's no need to return files already in the debug directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionProvider.CreateCategories">
            <summary>
            Returns all exception category definitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionProvider.Create">
            <summary>
            Returns all exception definitions
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.IDbgExceptionDefinitionProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.IDbgExceptionDefinitionProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionDefinitionProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionDefinitionProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionDefinitionProviderAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionDefinitionProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags">
            <summary>
            Exception event flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags.FirstChance">
            <summary>
            First chance exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags.SecondChance">
            <summary>
            Second chance exception
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionEventFlags.Unhandled">
            <summary>
            Unhandled exception. The program will be terminated if it tries to run again.
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionFormatter">
            <summary>
            Formats exceptions in the Exception Settings window. Use <see cref="T:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionFormatter.WriteName(dnSpy.Contracts.Debugger.Text.IDbgTextWriter,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition)">
            <summary>
            Writes the exception name. Returns true if it wrote the name.
            </summary>
            <param name="writer">Writer</param>
            <param name="definition">Exception definition</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.IDbgExceptionFormatterMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.IDbgExceptionFormatterMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute.Order"/></summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.IDbgExceptionFormatterMetadata.Category">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute.Category"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionFormatter"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute.#ctor(System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="category">Category, see <see cref="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories"/></param>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute.Category">
            <summary>
            Category, see <see cref="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.ExportDbgExceptionFormatterAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId">
            <summary>
            Exception ID
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Kind">
            <summary>
            Gets the id kind
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Category">
            <summary>
            Exception category, same as <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Name">
            <summary>
            Name of exception (case insensitive). This property is only valid if <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.HasName"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Code">
            <summary>
            Exception code. This property is only valid if <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.HasCode"/> is true
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.HasCode">
            <summary>
            true if the exception has a code, and not a name
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.HasName">
            <summary>
            true if the exception has a name, and not a code
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.IsDefaultId">
            <summary>
            true if this is the default exception ID
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.#ctor(System.String)">
            <summary>
            Constructor for default ids
            </summary>
            <param name="category">Exception category, same as <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name"/></param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="category">Exception category, same as <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name"/></param>
            <param name="name">Name of exception, must not be null</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="category">Exception category, same as <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name"/></param>
            <param name="code">Exception code</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="category">Exception category, same as <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition.Name"/></param>
            <param name="code">Exception code</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Equals(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId)">
            <summary>
            Equals()
            </summary>
            <param name="other">Other instance</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdKind">
            <summary>
            <see cref="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId"/> kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdKind.DefaultId">
            <summary>
            Default ID
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdKind.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdKind.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings">
            <summary>
            Exception settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.Conditions">
            <summary>
            Conditions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinitionFlags,System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Exceptions.DbgExceptionConditionSettings})">
            <summary>
            Constructor
            </summary>
            <param name="flags">Flags</param>
            <param name="conditions">Conditions or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.Equals(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings)">
            <summary>
            Equals()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.Equals(System.Object)">
            <summary>
            Equals()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService">
            <summary>
            Exception settings service
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Reset">
            <summary>
            Resets all exception settings and removes user-added exceptions
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Modify(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings)">
            <summary>
            Modifies an existing exception. It raises <see cref="E:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.ExceptionSettingsModified"/> if the
            new settings are not equal to the current settings.
            </summary>
            <param name="id">Id of existing exception</param>
            <param name="settings">New settings</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Modify(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings[])">
            <summary>
            Modifies existing exceptions. It raises <see cref="E:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.ExceptionSettingsModified"/> if the
            new settings are not equal to the current settings.
            </summary>
            <param name="settings">New settings</param>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.ExceptionSettingsModified">
            <summary>
            Raised when an exception is modified
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Remove(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId[])">
            <summary>
            Removes exception settings
            </summary>
            <param name="ids">IDs of all exceptions to remove</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Add(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo@)">
            <summary>
            Adds an exception
            </summary>
            <param name="settings">Exception settings</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Add(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo[])">
            <summary>
            Adds exceptions
            </summary>
            <param name="settings">Exception settings</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Exceptions">
            <summary>
            Gets all exceptions
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.ExceptionsChanged">
            <summary>
            Raised when <see cref="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.Exceptions"/> is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.TryGetDefinition(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition@)">
            <summary>
            Returns the exception definition if it exists
            </summary>
            <param name="id">Exception id</param>
            <param name="definition">Updated with the exception definition if the method returns true</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.TryGetSettings(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings@)">
            <summary>
            Returns exception settings or false if the exception doesn't exist in the collection
            </summary>
            <param name="id">Id of exception</param>
            <param name="settings">Updated with the exception settings if the method returns true</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.GetSettings(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId)">
            <summary>
            Returns exception settings. If the exception doesn't exist in the collection, the default exception settings is returned
            </summary>
            <param name="id">Id of exception</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.TryGetCategoryDefinition(System.String,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionCategoryDefinition@)">
            <summary>
            Gets the category definition if it exists
            </summary>
            <param name="category">Category, see <see cref="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories"/></param>
            <param name="definition">Updated with the category definition if the method returns true</param>
            <returns></returns>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.CategoryDefinitions">
            <summary>
            Gets all category definitions
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo">
            <summary>
            Contains the exception definition and exception settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo.Definition">
            <summary>
            Gets the definition
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsInfo.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionDefinition,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings)">
            <summary>
            Constructor
            </summary>
            <param name="definition">Exception definition</param>
            <param name="settings">Exception settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings">
            <summary>
            Exception id and settings
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings.Id">
            <summary>
            Gets the exception id
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings.#ctor(dnSpy.Contracts.Debugger.Exceptions.DbgExceptionId,dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettings)">
            <summary>
            Constructor
            </summary>
            <param name="id">Exception id</param>
            <param name="settings">Settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsModifiedEventArgs">
            <summary>
            <see cref="E:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsService.ExceptionSettingsModified"/> event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsModifiedEventArgs.IdAndSettings">
            <summary>
            Gets the ID and new settings
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Exceptions.DbgExceptionSettingsModifiedEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{dnSpy.Contracts.Debugger.Exceptions.DbgExceptionIdAndSettings})">
            <summary>
            Constructor
            </summary>
            <param name="idAndSettings">New settings</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories">
            <summary>
            Predefined exception categories
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Exceptions.PredefinedExceptionCategories.MDA">
            <summary>
            MDA (Managed Debugging Assistants)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.IDbgManagerStartListener">
            <summary>
            All exported classes implementing this interface get created the first time
            <see cref="M:dnSpy.Contracts.Debugger.DbgManager.Start(dnSpy.Contracts.Debugger.DebugProgramOptions)"/> gets called.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.IDbgManagerStartListener.OnStart(dnSpy.Contracts.Debugger.DbgManager)">
            <summary>
            Called the first time <see cref="M:dnSpy.Contracts.Debugger.DbgManager.Start(dnSpy.Contracts.Debugger.DebugProgramOptions)"/> gets called.
            The code has a chance to hook events and do other initialization before a program
            gets debugged.
            </summary>
            <param name="dbgManager">Debug manager instance</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Debugger.DbgRuntime"/> GUIDs (<see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.Guid"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetFramework">
            <summary>
            .NET Framework
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetFramework_Guid">
            <summary>
            .NET Framework
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNet_Guid">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetUnity">
            <summary>
            Unity
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetUnity_Guid">
            <summary>
            Unity
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetMono">
            <summary>
            Mono
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeGuids.DotNetMono_Guid">
            <summary>
            Mono
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids">
            <summary>
            Predefined runtime kind guids (<see cref="P:dnSpy.Contracts.Debugger.DbgRuntime.RuntimeKindGuid"/>)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDbgRuntimeKindGuids.DotNet_Guid">
            <summary>
            .NET
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedDebugTags">
            <summary>
            Predefined debug tags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedDebugTags.DotNetDebugger">
            <summary>
            .NET debugger
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedThreadKinds">
            <summary>
            Predefined thread kinds, see also <see cref="T:dnSpy.Contracts.Debugger.ThreadCategoryProvider"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.Unknown">
            <summary>
            Unknown thread kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.Main">
            <summary>
            Main thread
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.ThreadPool">
            <summary>
            Thread pool thread
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.WorkerThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.Terminated">
            <summary>
            Terminated thread
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.GC">
            <summary>
            Garbage Collector thread
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedThreadKinds.Finalizer">
            <summary>
            Finalizer thread
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.References.DbgLoadModuleReference">
            <summary>
            If passed to <see cref="M:dnSpy.Contracts.Documents.ReferenceNavigatorService.GoTo(System.Object,System.Object[])"/>, the module gets
            loaded and selected in the treeview
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.References.DbgLoadModuleReference.Module">
            <summary>
            Gets the module
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.References.DbgLoadModuleReference.UseMemory">
            <summary>
            true if the module should be read from memory and not from a file on disk
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.References.DbgLoadModuleReference.#ctor(dnSpy.Contracts.Debugger.DbgModule,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="module">Module</param>
            <param name="useMemory">true if the module should be read from memory and not from a file on disk</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandler">
            <summary>
            Loads modules (eg. in the Assembly Explorer treeview). Use <see cref="T:dnSpy.Contracts.Debugger.References.ExportDbgLoadModuleReferenceHandlerAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandler.GoTo(dnSpy.Contracts.Debugger.References.DbgLoadModuleReference,System.Collections.ObjectModel.ReadOnlyCollection{System.Object})">
            <summary>
            Returns true if it showed the reference, and false if the next handler should get called.
            This method is called on the UI thread.
            </summary>
            <param name="moduleRef">Module reference</param>
            <param name="options">Options, eg. <see cref="T:dnSpy.Contracts.Documents.PredefinedReferenceNavigatorOptions"/></param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandler.Load(dnSpy.Contracts.Debugger.DbgModule[],dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandlerOptions)">
            <summary>
            Loads modules in the treeview. Returns an array of modules that got loaded.
            </summary>
            <param name="modules">Modules to load. Unsupported modules can be ignored.</param>
            <param name="options">Options</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandlerOptions">
            <summary>
            Load module options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandlerOptions.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandlerOptions.AutoLoaded">
            <summary>
            The module load was caused by a non-user action
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandlerOptions.ForceMemory">
            <summary>
            Always load the module from the process' address space instead of from the module's file on disk
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.References.IDbgLoadModuleReferenceHandlerMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.References.IDbgLoadModuleReferenceHandlerMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.References.ExportDbgLoadModuleReferenceHandlerAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.References.ExportDbgLoadModuleReferenceHandlerAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.References.DbgLoadModuleReferenceHandler"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.References.ExportDbgLoadModuleReferenceHandlerAttribute.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.References.ExportDbgLoadModuleReferenceHandlerAttribute.Order">
            <summary>
            Order of this instance
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.RuntimeId">
            <summary>
            Runtime id; unique per process
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.RuntimeId.Equals(System.Object)">
            <summary>
            Compares this instance to another object
            </summary>
            <param name="obj">Other object</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.RuntimeId.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebuggingOptions">
            <summary>
            Debug a program base class. Created eg. by <see cref="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.GetOptions"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebuggingOptions.BreakKind">
            <summary>
            Where to break, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedBreakKinds"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebuggingOptions.CopyTo(dnSpy.Contracts.Debugger.StartDebuggingOptions)">
            <summary>
            Copies this instance to <paramref name="other"/>
            </summary>
            <param name="other">Destination</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.PredefinedBreakKinds">
            <summary>
            Predefined break kinds, see <see cref="P:dnSpy.Contracts.Debugger.StartDebuggingOptions.BreakKind"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedBreakKinds.DontBreak">
            <summary>
            Don't break, let the program run
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedBreakKinds.CreateProcess">
            <summary>
            Break as soon as the process has been created
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.PredefinedBreakKinds.EntryPoint">
            <summary>
            Entry point
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.ProcessStarterResult">
            <summary>
            Process starter result flags
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.ProcessStarterResult.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.ProcessStarterResult.WrongExtension">
            <summary>
            The file extension is not the normal extension
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.DbgProcessStarter">
            <summary>
            Starts a process without debugging
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.DbgProcessStarter.IsSupported(System.String,dnSpy.Contracts.Debugger.StartDebugging.ProcessStarterResult@)">
            <summary>
            Checks if this instance supports starting the executable
            </summary>
            <param name="filename">Filename</param>
            <param name="result">Contains extra information if it's a supported file</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.DbgProcessStarter.TryStart(System.String,System.String@)">
            <summary>
            Starts the executable. Returns false and an error message if it failed or throws an exception
            </summary>
            <param name="filename">Filename</param>
            <param name="error">Updated with an error message</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.IDbgProcessStarterMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.IDbgProcessStarterMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.StartDebugging.ExportDbgProcessStarterAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.ExportDbgProcessStarterAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.DbgProcessStarter"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.ExportDbgProcessStarterAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order, see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedDbgProcessStarterOrders"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.ExportDbgProcessStarterAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedDbgProcessStarterOrders">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.DbgProcessStarter"/> order constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedDbgProcessStarterOrders.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedDbgProcessStarterOrders.DefaultExe">
            <summary>
            Default process starter that calls <see cref="M:System.Diagnostics.Process.Start(System.String)"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders">
            <summary>
            Predefined options page display order constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNetFramework">
            <summary>
            .NET Framework debug engine
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNet">
            <summary>
            .NET debug engine
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNetUnity">
            <summary>
            Unity debug engine (start executable)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNetUnityConnect">
            <summary>
            Unity debug engine (connect to a waiting executable)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNetMono">
            <summary>
            Mono debug engine (start executable)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders.DotNetMonoConnect">
            <summary>
            Mono debug engine (connect to a waiting executable)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage">
            <summary>
            A page shown in the 'debug an application' dialog box. It provides a UI object
            and creates a <see cref="T:dnSpy.Contracts.Debugger.StartDebuggingOptions"/> instance that is used to start
            the application.
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.PropertyChanged">
            <summary>
            Raised after a property is changed
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.PropertyChanged"/>
            </summary>
            <param name="propName">Name of property that got changed</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.Guid">
            <summary>
            Guid of this page
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.DisplayOrder">
            <summary>
            Display order of the UI object compared to other instances, see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedStartDebuggingOptionsPageDisplayOrders"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.DisplayName">
            <summary>
            Name of debug engine shown in the UI, eg. ".NET Framework" or ".NET" or "Mono"
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.UIObject">
            <summary>
            Gets the UI object
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.IsValid">
            <summary>
            true if all options are valid and <see cref="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.GetOptions"/> can be called.
            <see cref="E:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.PropertyChanged"/> gets raised when this property is changed.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.InitializePreviousOptions(dnSpy.Contracts.Debugger.StartDebuggingOptions)">
            <summary>
            Initializes this instance to previous options
            </summary>
            <param name="options">Options</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.InitializeDefaultOptions(System.String,System.String,dnSpy.Contracts.Debugger.StartDebuggingOptions)">
            <summary>
            Initializes this instance to default options. If <paramref name="filename"/> is not
            an EXE file, then <paramref name="options"/> should be used to initialize this instance,
            else <paramref name="options"/> should be ignored.
            </summary>
            <param name="filename">Filename</param>
            <param name="breakKind">Default break kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedBreakKinds"/></param>
            <param name="options">Options or null</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.GetOptions">
            <summary>
            Gets all options. This method is only called if <see cref="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.IsValid"/> returns true
            </summary>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.SupportsDebugEngine(System.Guid,System.Double@)">
            <summary>
            Returns true if this is a debug engine page that is compatible with a debug engine
            (see eg. <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids"/>)
            </summary>
            <param name="engineGuid">Generic debug engine guid (see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids"/>)</param>
            <param name="order">Only used if the method returns true and is the order to use if more than
            one instance returns true. (see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders"/>)</param>
            <returns></returns>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.OnClose">
            <summary>
            Called when the dialog box gets closed
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfo">
            <summary>
            Contains the options and an optional filename
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfo.Options">
            <summary>
            Gets the options
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfo.Filename">
            <summary>
            Filename or null
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfo.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfo.#ctor(dnSpy.Contracts.Debugger.StartDebuggingOptions,System.String,dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfoFlags)">
            <summary>
            Constructor
            </summary>
            <param name="options">Options</param>
            <param name="filename">Filename or null</param>
            <param name="flags">Flags</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfoFlags">
            <summary>
            Extra start options
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfoFlags.None">
            <summary>
            No bit is set
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsInfoFlags.WrongExtension">
            <summary>
            The file extension is not the normal extension
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders">
            <summary>
            Returned by <see cref="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage.SupportsDebugEngine(System.Guid,System.Double@)"/>
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders.DotNetFramework">
            <summary>
            .NET Framework
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders.DotNetMono">
            <summary>
            .NET Mono
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.Dialog.PredefinedGenericDebugEngineOrders.DotNetUnity">
            <summary>
            .NET Unity
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageContext">
            <summary>
            Passed to a <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageProvider"/> instance
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageContext.CurrentFilename">
            <summary>
            Filename of the current selected file or an empty string
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageContext.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="currentFilename">Filename of the current selected file or an empty string</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageProvider">
            <summary>
            Creates <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage"/> instances. See also <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.GenericDebugEngineGuidProvider"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageProvider.Create(dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPageContext)">
            <summary>
            Creates new <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.Dialog.StartDebuggingOptionsPage"/> instances
            </summary>
            <param name="context">Context</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.GenericDebugEngineGuidProvider">
            <summary>
            Detects the debug engine that should be shown by default when showing the options.
            Use <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.ExportGenericDebugEngineGuidProviderAttribute"/> to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.GenericDebugEngineGuidProvider.GetEngineGuid(System.String)">
            <summary>
            Gets the guid of an engine (see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids"/>)
            </summary>
            <param name="filename">Filename</param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.IGenericDebugEngineGuidProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.IGenericDebugEngineGuidProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.StartDebugging.ExportGenericDebugEngineGuidProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.ExportGenericDebugEngineGuidProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.GenericDebugEngineGuidProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.StartDebugging.ExportGenericDebugEngineGuidProviderAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order, see <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuidProviderOrders"/></param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.StartDebugging.ExportGenericDebugEngineGuidProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuidProviderOrders">
            <summary>
            Predefined <see cref="T:dnSpy.Contracts.Debugger.StartDebugging.GenericDebugEngineGuidProvider"/> order constants
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuidProviderOrders.DotNetAny">
            <summary>
            .NET Framework / .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuidProviderOrders.DotNetUnity">
            <summary>
            Unity
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuidProviderOrders.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids">
            <summary>
            Predefined generic debug engine guids
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids.DotNetFramework">
            <summary>
            .NET Framework or compatible framework (eg. Mono)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.StartDebugging.PredefinedGenericDebugEngineGuids.DotNetUnity">
            <summary>
            Unity
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Steppers.DbgStepKind">
            <summary>
            Step kind
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepInto">
            <summary>
            Step into
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepOver">
            <summary>
            Step over
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepOut">
            <summary>
            Step out
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepIntoProcess">
            <summary>
            Step into (only one process executes, the other ones aren't started)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepOverProcess">
            <summary>
            Step over (only one process executes, the other ones aren't started)
            </summary>
        </member>
        <member name="F:dnSpy.Contracts.Debugger.Steppers.DbgStepKind.StepOutProcess">
            <summary>
            Step out (only one process executes, the other ones aren't started)
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Steppers.DbgStepper">
            <summary>
            Steps into, over or out of a method
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Process">
            <summary>
            Gets the process
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Runtime">
            <summary>
            Gets the runtime
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepper.CanStep">
            <summary>
            true if it's possible to call <see cref="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Step(dnSpy.Contracts.Debugger.Steppers.DbgStepKind,System.Boolean)"/> (eg. process must be paused)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepper.IsStepping">
            <summary>
            true if <see cref="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Step(dnSpy.Contracts.Debugger.Steppers.DbgStepKind,System.Boolean)"/> has been called but <see cref="E:dnSpy.Contracts.Debugger.Steppers.DbgStepper.StepComplete"/> hasn't been raised yet
            </summary>
        </member>
        <member name="E:dnSpy.Contracts.Debugger.Steppers.DbgStepper.StepComplete">
            <summary>
            Raised when the step is complete
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Step(dnSpy.Contracts.Debugger.Steppers.DbgStepKind,System.Boolean)">
            <summary>
            Steps once. This method can be called again once <see cref="E:dnSpy.Contracts.Debugger.Steppers.DbgStepper.StepComplete"/> is raised.
            The method can only be called when its process is paused.
            </summary>
            <param name="step">Step kind</param>
            <param name="autoClose">true to call <see cref="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Close"/> once <see cref="E:dnSpy.Contracts.Debugger.Steppers.DbgStepper.StepComplete"/> is raised</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Cancel">
            <summary>
            Cancels the step
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Close">
            <summary>
            Closes the stepper and cancels <see cref="M:dnSpy.Contracts.Debugger.Steppers.DbgStepper.Step(dnSpy.Contracts.Debugger.Steppers.DbgStepKind,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Steppers.DbgStepCompleteEventArgs">
            <summary>
            Step complete event args
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepCompleteEventArgs.Thread">
            <summary>
            Gets the thread
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepCompleteEventArgs.Error">
            <summary>
            Gets the error message or null if none
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Steppers.DbgStepCompleteEventArgs.HasError">
            <summary>
            true if there was an error
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Steppers.DbgStepCompleteEventArgs.#ctor(dnSpy.Contracts.Debugger.DbgThread,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Thread</param>
            <param name="error">Error message or null if none</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter">
            <summary>
            An <see cref="T:dnSpy.Contracts.Debugger.Text.IDbgTextWriter"/> using a <see cref="T:System.Text.StringBuilder"/>. It ignores
            all colors passed to it.
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.IsEmpty">
            <summary>
            true if nothing has been written
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.Text">
            <summary>
            Gets all the text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Constructor
            </summary>
            <param name="stringBuilder">String builder</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.Write(dnSpy.Contracts.Debugger.Text.DbgTextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.WriteLine">
            <summary>
            Writes a new line
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.Reset">
            <summary>
            Resets this instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DbgStringBuilderTextWriter.ToString">
            <summary>
            Gets all the text
            </summary>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Text.DbgTextColor">
            <summary>
            Text colors used by formatters
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.Debugger.Text.IDbgTextWriter"/> and stores all colors and text.
            The result can be passed to <see cref="M:dnSpy.Contracts.Text.Classification.TextClassifierContext.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyCollection{dnSpy.Contracts.Text.SpanData{System.Object}})"/>
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.Length">
            <summary>
            Gets the text length
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.Colors">
            <summary>
            Gets the colors
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.Write(dnSpy.Contracts.Debugger.Text.DbgTextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextClassifierTextColorWriter.Clear">
            <summary>
            Clears the text and colors so the instance can be reused
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextColorWriter">
            <summary>
            Implements <see cref="T:dnSpy.Contracts.Text.ITextColorWriter"/> and writes to a <see cref="T:dnSpy.Contracts.Debugger.Text.IDbgTextWriter"/>
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextColorWriter.#ctor(dnSpy.Contracts.Debugger.Text.IDbgTextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Debug text writer</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextColorWriter.Write(System.Object,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.DnSpy.DbgTextColorWriter.Write(dnSpy.Contracts.Text.TextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.Text.IDbgTextWriter">
            <summary>
            Writes text
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.Text.IDbgTextWriter.Write(dnSpy.Contracts.Debugger.Text.DbgTextColor,System.String)">
            <summary>
            Writes text
            </summary>
            <param name="color">Color</param>
            <param name="text">Text</param>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.ThreadCategoryProvider">
            <summary>
            Provides thread categories and images. Use <see cref="T:dnSpy.Contracts.Debugger.ExportThreadCategoryProviderAttribute"/>
            to export an instance.
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ThreadCategoryProvider.GetCategory(System.String)">
            <summary>
            Returns the thread category info or null
            </summary>
            <param name="kind">Thread kind, see <see cref="T:dnSpy.Contracts.Debugger.PredefinedThreadKinds"/></param>
            <returns></returns>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.IThreadCategoryProviderMetadata">
            <summary>Metadata</summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.IThreadCategoryProviderMetadata.Order">
            <summary>See <see cref="P:dnSpy.Contracts.Debugger.ExportThreadCategoryProviderAttribute.Order"/></summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.ExportThreadCategoryProviderAttribute">
            <summary>
            Exports a <see cref="T:dnSpy.Contracts.Debugger.ThreadCategoryProvider"/> instance
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ExportThreadCategoryProviderAttribute.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ExportThreadCategoryProviderAttribute.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="T:dnSpy.Contracts.Debugger.ThreadCategoryInfo">
            <summary>
            Thread category info
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ThreadCategoryInfo.Image">
            <summary>
            Image (an ImageReference struct)
            </summary>
        </member>
        <member name="P:dnSpy.Contracts.Debugger.ThreadCategoryInfo.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="M:dnSpy.Contracts.Debugger.ThreadCategoryInfo.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="image">Image</param>
            <param name="category">Category</param>
        </member>
    </members>
</doc>
